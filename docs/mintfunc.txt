		[ mint 内部命令マニュアル ]


------------------------------------------------------------------------

　入力されている命令のうちウィンドウを表示するものは、全て -t"title" オ
プション(ウィンドウのタイトル文字列を変更する)に対応している。

------------------------------------------------------------------------


================
名称:		&16color-palet-set
機能:		16 色モードのグラフィックパレットを読み込む。

書式:		&16color-palet-set
引数:		なし。
返値:		なし。

解説:		　グラフィック 16 色表示モード用のパレットを、Graphic
		Mask の常駐パレットから読み込む。

================
名称:		&64kcolor-palet-set
機能:		グラフィックパレットを 65536 色モード用に設定する。

書式:		&64kcolor-palet-set
引数:		なし。
返値:		なし。

解説:		　グラフィックパレットを 65536 色モード用に設定する。

================
名称:		&bell
別名:		&beep
機能:		コンソール画面に BEL を出力する。

書式:		&bell
引数:		なし。
返値:		なし。

解説:		　コンソール画面に BEL(^G)を出力する。

================
名称:		&break
別名:		&last
機能:		&foreach のループ実行を中断する。

書式:		&break
引数:		なし。
返値:		なし。

解説:		　&foreach によるループ実行中(ブロック内実行中)にこの命
		令を使用すると、直ちに現在実行中のブロックを終了し、ルー
		プ実行も中断する。次に実行される命令は、&foreach の直後
		のブロックの次に記述した命令となる。

		　&foreach によるループ実行中以外にこの命令を使用すると、
		全ての処理を直ちに中断するが、このような用途には本来は
		&end 命令を使用すべきである。

用例:		&foreach ( ) { &if ( 3 > &get-music-status ) { &break } }
			# 音楽演奏が終了するまで待機する。

		&foreach ( $M ) { &break } &print $_
			# 先頭のマークファイル名を表示する。

================
名称:		&brightness-decrement
別名:		&16color-brightness-decrement
機能:		グラフィック画面の輝度を下げる。

書式:		&brightness-decrement
引数:		なし。
返値:		成功時 1、失敗時 0。

解説:		　グラフィック画面の輝度を、パレット操作により全輝度に対
		して 1/100 だけ下げる。輝度の変更後は -g 系のコマンドス
		イッチを適切に指定しなければ期待通りに動作しないので注意
		すること。

		　別名の &16color-～ は互換性の為だけに残してあるので、
		今後は使わない方が良い。

================
名称:		&brightness-increment
別名:		&16color-brightness-increment
機能:		グラフィック画面の輝度を上げる。

書式:		&brightness-increment
引数:		なし。
返値:		成功時 1、失敗時 0。

解説:		　グラフィック画面の輝度を、パレット操作により全輝度に対
		して 1/100 だけ上げる。輝度の変更後は -g 系のコマンドス
		イッチを適切に指定しなければ期待通りに動作しないので注意
		すること。

		　別名の &16color-～ は互換性の為だけに残してあるので、
		今後は使わない方が良い。

================
名称:		&cache-off
機能:		データキャッシュ/命令キャッシュをオフにする。

書式:		&cache-off
引数:		なし。
返値:		なし。

解説:		　MPU 内蔵のデータキャッシュ/命令キャッシュをオフにする。

================
名称:		&cache-on
機能:		データキャッシュ/命令キャッシュをオンにする。

書式:		&cache-on
引数:		なし。
返値:		なし。

解説:		　MPU 内蔵のデータキャッシュ/命令キャッシュをオンにする。

================
名称:		&cal
機能:		式の値をシステム変数若しくはユーザ変数に設定する。

書式:		&cal [-c] name exp …
引数:		-c	システム変数に値を設定した場合、終了時に
			&clear-and-redraw を呼び出す。
		name	システム変数名若しくはユーザ変数名。
		exp	数式。
返値:		成功時 1、失敗時 0。

解説:		　exp で指定した数式を解き、その値を name で指定したシス
		テム変数若しくはユーザ変数に設定する。正常終了した場合は
		1 を、それ以外の場合は 0 を返す。

		　数式は複数の引数に分けて記述する事が出来る。その場合、
		各引数は無条件に連結してから解析される。また、引数内の空
		白は無条件に削除される。演算は符号付き 32 ビット整数で行
		われる。

		　数式に使用可能な要素は以下の通り。

		・数	10 進数
			$ 若しくは 0x から始まる 16 進数
			0b から始まる 2 進数
		・因子	数、'(' と ')' の対で囲まれた式
		・項	因子、演算子で結んだ複数の因子
		・式	項、演算子で結んだ複数の項

		　数式に使用可能な演算子は以下の通り。

		・単項演算子	+ - !(論理否定) ~(ビット反転)
		・二項演算子	* / % << >> + -
				== != < > <= >=
				& | ^ && ||
		・三項演算子	?:

		　演算子及び括弧の評価優先順位は以下の通り。

		( )
		+ - ! ~
		* / % << >>
		+ -
		== != < > <= >=
		&
		^ |
		&& ||
		?:

================
名称:		&cd
別名:		&chdir
機能:		指定ディレクトリに移動する。

書式:		&cd [-] [d:] [path]
引数:		-	$OLDPWD に移動する。
		d:	指定したドライブのカレントディレクトリに移動する。
		path	指定したパスに移動する。
返値:		成功時 1、失敗時 0。

解説:		　指定ディレクトリに移動する。移動先のディレクトリは様々
		な方法で指定でき、引数を省略すれば環境変数 HOME で指定し
		たディレクトリに移動する。移動できた場合は 1、それ以外の
		場合は 0 を返す。

		　ディレクトリの指定には以下の形式が使用できる。

		・&cd、&cd ~/
			　環境変数 HOME で指定したディレクトリに移動する。

		・&cd -
			　ひとつ前に移動したディレクトリ($OLDPWD)に移動
			する。起動直後は $OLDPWD は設定されていないので
			指定できない。

		・&cd d:
			　d: ドライブのカレントディレクトリに移動する。

		・&cd foo
			　カレントにある foo に移動する。なければ環境変
			数 MINTCDPATH(ない場合は CDPATH)に指定されている
			ディレクトリから順次 foo を検索して移動する。

		・&cd /foo、&cd \foo
			　ルートディレクトリにある foo に移動する。ない
			場合は (MINT)CDPATH から検索する。「ルートディレ
			クトリ」が何を示すかは (V)TwentyOne.sys の設定に
			よる。

================
名称:		&cdjp
機能:		指定ドライブに移動する。

書式:		&cdjp [path] [<medianame><unitno>]
引数:		path	パス名の指定。
		<medianame><unitno>
			メディア名とユニット番号によるドライブ指定。
返値:		成功時 1、失敗時 0。

解説:		　&eject と同じ指定方法により &cd を実行する。メディア名
		とユニット番号による指定だけでなく、&cd で指定できる方法
		も使用できる。

================
名称:		&change-drive
別名:		&change-drive-menu
機能:		ドライブを変更する。

書式:		&change-drive [-s] [-d[c]] [drive]
引数:		-s	メニューでドライブを選択するが、ユーザ変数 _ に
			格納されるだけでドライブの変更は行われない。
		-d[c]	初期カーソル位置を a-zA-Z で指定した c のドライ
			ブに変更する。このオプションを指定しない時はカレ
			ントウィンドウのドライブに置かれる。ドライブ名を
			省略したり、存在しないドライブを指定するとカーソ
			ルは 0 行目に置かれる。
		drive	ドライブ名(d または d: 形式)。
返値:		成功時 1、失敗時 0。

解説:		　メニュー上からドライブを選択し、カーソルウィンドウを指
		定ドライブに変更する。変更したドライブ名は $_ に A、B、
		…、Z という形式で格納される。成功した場合は 1、そうでな
		い場合は 0 を返す。

		　a-zA-Z でドライブ名を指定した場合、メニューは表示され
		ず直接そのドライブに移動する(実は最初の一文字しか見てい
		ないので、d: といった形式でも可)。成功した場合は 1、そう
		でない場合は 0 を返す。

		　なお、$_ は $ARG としても参照可能である。

================
名称:		&chdir-to-opposite-window
機能:		反対側パスと同じディレクトリに移動する。

書式:		&chdir-to-opposite-window
引数:		なし。
返値:		なし。

解説:		　反対側パスと同じディレクトリに移動する。

================
名称:		&chdir-to-parent
別名:		&cursor-to-parent
機能:		親ディレクトリに移動する。

書式:		&chdir-to-parent
引数:		なし。
返値:		成功時 1、失敗時 0。

解説:		　親ディレクトリに移動する。&cd .. と同じ。

================
名称:		&chdir-to-registered-path-menu
機能:		登録パスをメニューで選択して移動する。

書式:		&chdir-to-registered-path-menu [-s] [-l<n>] num
引数:		-s	実際に移動はせずに、ユーザ変数 _ にパス名を設定
			する。
		-l<n>	初期カーソル位置(行番号)を設定する。
		num	メニュー番号を指定する(1～16)。
返値:		なし。

解説:		　定義ファイルの @jump ～ @jm16 に記述した登録パスメニュ
		ーのうち、num で指定した番号のメニューを表示し、選択した
		パスに移動する。%winn 0 の場合なら、左右カーソルキーを入
		力することで違うメニューに移ることが出来る。

================
名称:		&chmod
機能:		ファイル属性を変更する。

書式:		&chmod [-f] {-+=}[xladvshr] filename …
引数:		-f	通常ディレクトリ/リンク/ボリューム属性は変更され
			ないが、このオプションを指定した場合はそれらの変
			更も許可する。
		{-+=}[xladvshr]
			動作モードと対象属性の指定。
		filename
			ファイル名。
返値:		全て正常終了した場合はそのファイル数、一度でもエラーが発
		生した場合は 0。

解説:		　ファイル属性を変更する。「-属性リスト」で指定した属性
		を取り消し、「+属性リスト」で指定した属性を設定、
		「=属性リスト」で指定した属性のみ設定しそれ以外の属性は
		取り消す。

		　全て正常終了した場合はそのファイル数を、一度でもエラー
		が発生した場合は 0 を返す。ただし、-f を付けずにディレク
		トリ/リンク/ボリューム属性を指定した場合は無視され、エラ
		ーにはならない。

		　ディレクトリのリロードは行わないので、各自で &reload
		などを使用する必要がある。

================
名称:		&clear-and-redraw
機能:		全画面を消去し、再表示する。

書式:		&clear-and-redraw
引数:		なし。
返値:		なし。

解説:		　全画面を消去し、再表示する。

================
名称:		&clear-exec-screen
機能:		コンソールを消去する。

書式:		&clear-exec-screen
引数:		なし。
返値:		なし。

解説:		　画面下部のコンソールを消去する。

================
名称:		&clear-gvram
機能:		グラフィック画面をクリアする。

書式:		&clear-gvram
引数:		なし。
返値:		成功時 1、失敗時 0。

解説:		　GVRAM を 0 で埋め、グラフィック画面の表示をオフにする。

================
名称:		&clear-mark
機能:		マークを全て解除する。

書式:		&clear-mark
引数:		なし。
返値:		なし。

解説:		　カーソルのある側のウィンドウ内の全てのマークを解除する。

================
名称:		&clear-path-stack
機能:		パススタックを破棄する。

書式:		&clear-path-stack
引数:		なし。
返値:		常に 1。

解説:		　&pushd によって積まれたパススタックを全て破棄する。

================
名称:		&clear-text
機能:		テキスト画面を完全に消去し、再表示する。

書式:		&clear-text
引数:		なし。
返値:		なし。

解説:		　マウスプレーンも含めテキスト画面を完全に消去し、再表示
		する。&clear-and-redraw より強力な初期化が可能。

================
名称:		&command-history
機能:		コマンド履歴を選択、編集して実行する。

書式:		&command-history
引数:		なし。
返値:		なし。

解説:		　一行入力により過去に実行したコマンドを選択、編集し実行
		する。最初にウィンドウに表示されるのは最後に登録されたコ
		マンドであるが、ROLL DOWN キーを押せば、それより前に登録
		されたコマンドを選択することが出来る(ROLL UP キーを押せ
		ば逆となる)。

		　なお、本命令は mint version 2 で &command-history-menu
		として実装されたが、命令名が相応しくなかったため、mint
		version 3.10 で現在の名称に変更された。

================
名称:		&command-history-menu
機能:		コマンド履歴をメニューで選択して実行する。

書式:		&command-history-menu [-l<n>]
引数:		-l<n>	初期カーソル位置を指定する(0で表示なし)。省略時
			は1(先頭行)になる。
返値:		なし。

解説:		　過去に実行したコマンドの一覧を出し、選択したコマンドを
		実行する。このとき、RETURN や ENTER を押すとそのまま実行
		されるが、'e' 及び 'v' キーを入力することにより、コマン
		ドを編集してから実行することが出来る。

		　なお、本命令は mint version 3.00 で &command-history
		として実装されたが、命令名が相応しくなかったため、mint
		version 3.10 で現在の名称に変更された。

================
名称:		&cont-music
別名:		&continue-music
機能:		音楽の演奏を再開する。

書式:		&cont-music
引数:		なし。
返値:		音源ドライバ未常駐時は 0、それ以外は 1。

解説:		　音楽演奏の一時停止を解除し、演奏を再開する。

================
名称:		&continue
別名:		&next
機能:		&foreach のループ実行を先頭から再開する。

書式:		&continue
引数:		なし。
返値:		なし。

解説:		　&foreach によるループ実行中(ブロック内実行中)にこの命
		令を使用すると、直ちに現在実行中のブロックを終了し、次の
		単語の処理に移行する。処理中の単語が最後のものであった場
		合は、ループ実行が終了する。

		　&foreach によるループ実行中以外にこの命令を使用すると、
		全ての処理を直ちに中断するが、このような用途には本来は
		&end 命令を使用すべきである。

================
名称:		&copy
別名:		&cp
機能:		ファイル/ディレクトリをコピーする

書式:		&copy [[-d…] path] [-j] [-s<mode>]
引数:		-d… path
			パス名。
		path	パス名。
		-j	ディレクトリを作成しない。
		-s<mode>
			同名ファイルが存在した場合の処理の指定。<mode>
			には以下のいずれかの一文字を指定する。
			O	Force overwrite
			U	Update
			R	Rename copy
			N	Not copy
			A	Automatic[_] copy
			_	file compare
			C	AI copy
返値:		成功時 1、失敗時 0。

解説:		　マークしたファイル及びディレクトリを、path で指定した
		ディレクトリにコピーする。パス名を省略した場合は反対側ウ
		ィンドウのディレクトリにコピーする。実行できた場合は 1
		を、それ以外の場合は 0 を返す(結果的にファイルを一つもコ
		ピーしなくても 1 が返るので注意すること)。

		　%nmcp 1 の場合、マークがない場合はカーソル位置のファイ
		ル若しくはディレクトリをコピーする。

		　-d… はコピー先のパス名を指定するオプションであるが、
		過去のバージョンとの互換性から '-d' 以降の文字は無視され、
		「-d path」や「-destination path」といった指定が可能であ
		る。しかし、通常は -d… そのものを省略して構わない。

		　-j オプションを指定した場合、コピー先にサブディレクト
		リを作らず、マークファイル及びマークしたディレクトリ内の
		ファイルを指定したコピー先ディレクトリ自体にコピーする。

用例:		&copy g:/
			# マークファイル/ディレクトリを g:/ にコピー。

		&copy -sO
			# マークファイル/ディレクトリを反対側ウィンドウ
			# にコピー。同名ファイルがあった場合は強制的に上
			# 書きする。

================
名称:		&copy-to-history-menu
機能:		ディレクトリ履歴を選択してファイルをコピーする。

書式:		&copy-to-history-menu [-j] [-s<mode>] [-l<n>] [-o]
引数:		-j	ディレクトリを作成しない。
		-s<mode>
			同名ファイルが存在した場合の処理の指定。
		-l<n>	初期カーソル位置を指定する(0で表示なし)。省略時
			は1(先頭行)になる。
		-o	反対側ウィンドウの履歴から選択する。
返値:		成功時 1、失敗時 0。

解説:		　過去に移動した事のあるディレクトリの一覧を出し、選択し
		たディレクトリに、マークしたファイル及びディレクトリをコ
		ピーする。詳細は &copy 及び &path-history-menu の項を参
		照のこと。

================
名称:		&copy-to-registered-path-menu
機能:		登録パスをメニューで選択してファイルをコピーする。

書式:		&copy-to-registered-path-menu [-j] [-s<mode>] [-l<n>] num
引数:		-j	ディレクトリを作成しない。
		-s<mode>
			同名ファイルが存在した場合の処理の指定。
		-l<n>	初期カーソル位置(行番号)を設定する。
		num	メニュー番号を指定する(1～16)。
返値:		成功時 1、失敗時 0。

解説:		　定義ファイルの @jump ～ @jm16 に記述した登録パスメニュ
		ーのうち、num で指定した番号のメニューを表示し、選択した
		パスに、マークしたファイル及びディレクトリをコピーする。
		詳細は &copy の項を参照のこと。

================
名称:		&crt-write-disable
機能:		画面への書き込みを禁止する。

書式:		&crt-write-disable
引数:		なし。
返値:		なし。

解説:		　画面への書き込みを禁止する。全てのチェインの終了後、自
		動的に解除され、再表示が行われる。

================
名称:		&cursor-down
機能:		カーソルを一つ下に移動する。

書式:		&cursor-down
引数:		なし。
返値:		成功時 1、失敗時 0。

解説:		　カーソルを一つ下に移動する。成功した場合は 1、それ以外
		は 0 を返す。

================
名称:		&cursor-left
機能:		カーソルを左側ウィンドウに移動する。

書式:		&cursor-left
引数:		なし。
返値:		成功時 1、失敗時 0。

解説:		　カーソルを左側ウィンドウに移動する。既に左側にあった場
		合、設定によっては &chdir-to-parent が呼び出される。

================
名称:		&cursor-opposite-window
機能:		カーソルを反対側ウィンドウに移動する。

書式:		&cursor-opposite-window
引数:		なし。
返値:		常に 1。

解説:		カーソルを反対側ウィンドウに移動する。

================
名称:		&cursor-right
機能:		カーソルを右側ウィンドウに移動する。

書式:		&cursor-right
引数:		なし。
返値:		成功時 1、失敗時 0。

解説:		　カーソルを右側ウィンドウに移動する。既に右側にあった場
		合、設定によっては &chdir-to-parent が呼び出される。

================
名称:		&cursor-rolldown
機能:		カーソル側ウィンドウを一頁逆方向に捲る。

書式:		&cursor-rolldown
引数:		なし。
返値:		成功時 1、失敗時 0。

解説:		カーソル側ウィンドウを一頁逆方向に捲る。

================
名称:		&cursor-rollup
機能:		カーソル側ウィンドウを一頁正方向に捲る。

書式:		&cursor-rollup
引数:		なし。
返値:		成功時 1、失敗時 0。

解説:		カーソル側ウィンドウを一頁正方向に捲る。

================
名称:		&cursor-to-bottom
機能:		カーソルをウィンドウ末尾に移動する。

書式:		&cursor-to-bottom
引数:		なし。
返値:		成功時 1、失敗時 0。

解説:		　カーソルをウィンドウ末尾に移動する。

================
名称:		&cursor-to-home
機能:		カーソルをウィンドウ先頭に移動する。

書式:		&cursor-to-home
引数:		なし。
返値:		成功時 1、失敗時 0。

解説:		　カーソルをウィンドウ先頭に移動する。

================
名称:		&cursor-up
機能:		カーソルを一つ上に移動する。

書式:		&cursor-up
引数:		なし。
返値:		成功時 1、失敗時 0。

解説:		　カーソルを一つ下に移動する。成功した場合は 1、それ以外
		は 0 を返す。

================
名称:		&data-cache-off
機能:		データキャッシュをオフにする。

書式:		&data-cache-off
引数:		なし。
返値:		なし。

解説:		　MPU 内蔵のデータキャッシュをオフにする。

================
名称:		&data-cache-on
機能:		データキャッシュをオンにする。

書式:		&data-cache-on
引数:		なし。
返値:		なし。

解説:		MPU 内蔵のデータキャッシュをオンにする。

================
名称:		&data-title
機能:		データファイルのタイトルを表示する。

書式:		&data-title [filename]
引数:		filename
			データファイル名。
返値:		成功時 1、失敗時 0。ただし %dttl 0 の場合はなし。

解説:		　filename で指定したファイルのデータタイトル/コメント等
		を表示する。filename 無指定時はカーソル行ファイルが対象
		となる。mintarc 内では既に解凍されていた場合にのみ表示す
		る。

		　.mid/.smf は真面目に処理していないのでファイルによって
		は期待通りに動作しない。

		　なお、.zms はシステム変数 zmst で指定した行数だけしか
		ファイルから読み込まない。

仕様:		　.mdx/.mdr/.mdz/.kdd/.zms については指定されたファイル
		名の拡張子でデータ形式を判別する。それ以外はファイル内容
		を見て判別する。

================
名称:		&debug
機能:		デバッグ表示を行う。

書式:		&debug
引数:		なし。
返値:		なし。

解説:		　デバッグの為の情報を表示する。トグル動作となっており、
		もう一度実行すると表示されなくなる。

================
名称:		&delete
機能:		マークファイルを削除する。

書式:		&delete
引数:		なし。
返値:		なし。

解説:		　マークしたファイル及びディレクトリを削除する。ディレク
		トリに内にファイルが存在する場合も再帰的に削除することが
		出来る。

================
名称:		&describe-key
機能:		キーバインドヘルプ

書式:		&describe-key [-l<n>]
引数:		-l<n>	初期カーソル位置を指定する(0で表示なし)。省略時
			は1(先頭行)になる。
返値:		なし。

解説:		　実行するとウィンドウが表示されてキー入力を待つので、任
		意のキーを入力すると、そのキーに割り当てられた定義をウィ
		ンドウに表示する。メニューになっているので、カーソルキー
		等で選択すれば任意の行から実行することが出来る。

		　&ext-help とほぼ同じなので、詳細は &ext-help の解説を
		参照のこと。

		　%opt! 1～2 に設定してある場合は、OPT.1～2 キーを押して
		から任意のキーを押すと、直接キーバインドが表示される。

================
名称:		&direct-copy
機能:		入力したパスにファイル/ディレクトリをコピーする

書式:		&direct-copy [path] [-j] [-s<mode>]
引数:		path	パス名。
		-j	ディレクトリを作成しない。
		-s<mode>
			同名ファイルが存在した場合の処理の指定。
返値:		成功時 1、失敗時 0。

解説:		　入力ウィンドウでパス名を入力し、そのディレクトリに、マ
		ークしたファイル及びディレクトリをコピーする。詳細は
		&copy の項を参照のこと。

================
名称:		&direct-move
機能:		入力したパスにファイル/ディレクトリを移動する。

書式:		&direct-move [path] [-j] [-s<mode>]
引数:		path	パス名。
		-j	ディレクトリを作成しない。
		-s<mode>
			同名ファイルが存在した場合の処理の指定。
返値:		成功時 1、失敗時 0。

解説:		　入力ウィンドウでパス名を入力し、そのディレクトリに、マ
		ークしたファイル及びディレクトリをコピーする。詳細は
		&move の項を参照のこと。

================
名称:		&drive-check
機能:		ドライブ状態を収得する。

書式:		&drive-check
引数:		なし。
返値:		なし。

解説:		　OS のドライブ状態の変化を調べ、内部ワークを更新する。
		以下のような時に実行するとよい。

		・FDD 関係のドライバを組み込んだり解除した時
		・drive コマンドでドライブを交換した時
		・subst コマンドで仮想ディレクトリを設定・解除した時

================
名称:		&drive-decrement
機能:		前のドライブに移動する。

書式:		&drive-decrement
引数:		なし。
返値:		成功時 1、失敗時 0。

解説:		　カレントドライブより前にあるドライブに移動する(未使用
		ドライブは飛ばされる)。A: ドライブで実行した場合は Z:
		ドライブに移動する。

================
名称:		&drive-increment
機能:		次のドライブに移動する。

書式:		&drive-increment
引数:		なし。
返値:		成功時 1、失敗時 0。

解説:		　カレントドライブの次にあるドライブに移動する(未使用ド
		ライブは飛ばされる)。Z: ドライブで実行した場合は A: ドラ
		イブに移動する。

================
名称:		&echo
機能:		文字列をコンソールに表示する。

書式:		&echo [-e] [-n] [-] str …
引数:		-e	'\' に続く文字を制御記号に変換する。
		-n	画面を初期化しない。
		-	以降の引数を文字列と見なし、オプション解析を打ち
			切る。
		str	文字列。
返値:		常に 1。

解説:		　文字列をコンソールに表示する。複数の引数を与えた場合、
		各引数を一個の半角スペースで繋げて表示する。

		　-e オプション指定時に使用可能な文字は以下の通り。
			\\	'\'
			\a	ベル
			\b	バックスペース
			\e	エスケープ
			\f	改頁
			\n	改行
			\r	復帰
			\t	水平タブ
			\v	垂直タブ
			\x??	二桁の16進数で文字コードを指定
			上記以外はそのまま出力する。

================
名称:		&edit-env-variable
機能:		環境変数を編集する。

書式:		&edit-env-variable
引数:		なし。
返値:		なし。

解説:		　入力ウィンドウにより環境変数を設定、削除する。実行する
		とウィンドウが開くので、変数名、'='、設定する値を入力し
		て確定すると環境変数が設定される。値を省略すると削除され
		る。'=' 以降を省略すると、現在設定されている値を収得し、
		入力ウィンドウに表示してもう一度入力を行う。

================
名称:		&edit-volume-name
機能:		ボリュームラベルを変更する。

書式:		&edit-volume-name
引数:		なし。
返値:		なし。

解説:		　カレントドライブのボリュームラベルを変更する。

================
名称:		&eject
機能:		ドライブに挿入されているメディアを排出する。

書式:		&eject [-q] [d:] [<medianame><unitno>] …
引数:		-q	エラー表示を抑制する。
		d:	ドライブ名の指定。
		<medianame><unitno>
			メディア名とユニット番号によるドライブ指定。
返値:		排出に成功したドライブ数。

解説:		　指定ドライブのメディアを排出する。排出に成功したドライ
		ブ数を返す。

		　ドライブの指定には、A:～Z:(a:～z:)だけでなくメディア名
		とユニット番号による指定が可能。ただしユニット番号は OS
		に認識された順に 0 からつけた通し番号である。

		　指定できるメディア名は以下の通り。
			dat	DAT
			cd	CD-ROM
			mo	MO
			hd	SCSI-HD
			ram	RAMDISK
			fd	フロッピーディスク(2HD だけでなく全ての
				フォーマットを認識)

用例:		&eject a: b:;	# A:ドライブとB:ドライブを排出。
		&eject mo0	# 一番最初に組み込まれたMOドライブを排出。

================
名称:		&else
機能:		直前の &if 系命令が不成立の時、直後のブロックを実行する。

書式:		&else { BLOCK }
引数:		なし。
返値:		なし。

解説:		　直前の &if 系命令(&if、&unless、&else-if、&elsif)がブ
		ロックを実行していなかった場合、&else の直後のブロックを
		実行する。逆に、直前の &if 系命令がブロックを実行してい
		た場合は、&else の直後のブロックは実行せず、無視する。

		　&else の直前には必ず &if 系命令がなければならない。

================
名称:		&else-if
別名:		&elsif
機能:		式の値が真の時、直後のブロックを実行する。

書式:		&else-if [exp] { BLOCK }
引数:		exp	式。
返値:		なし。

解説:		　式の値が真で、かつ、直前の &if 系命令(&if、&unless、
		&else-if、&elsif)がブロックを実行していなかった場合、
		&else-if の直後のブロックを実行する。式の値が偽であるか、
		若しくは直前の &if 系命令がブロックを実行していた場合は、
		&else-if の直後のブロックは実行せず、無視する。

		　式の書式に関しては &if の項を参照すること。

		　&else-if、&elsif の直前には必ず &if 系命令がなければな
		らない。

================
名称:		&end
別名:		&return
機能:		madoka の実行を中断する。

書式:		&end
引数:		なし。
返値:		なし。

解説:		　madoka の実行を直ちに中断する。

================
名称:		&endm
機能:		マクロの終端を示す。

書式:		&endm
引数:		なし。
返値:		なし。

解説:		　全く何もしない。マクロ定義は ';' や '}' などのチェイン
		記号で終わらせてはいけないので、マクロ内で &if などを使
		った場合に末尾を '}' で終わらせない為に記述する。

用例:		$foo	&if ( &is-mark ) { &print "mark" } &endm

================
名称:		&equ
別名:		&strcmp
機能:		文字列を比較する。

書式:		&equ [-i | -c] str1 str2
引数:		-i	大文字小文字を同一視する。
		-c	大文字小文字を区別する(デフォルト)。
		str1	比較元文字列。
		str2	比較先文字列。
返値:		一致時 1、不一致時 0。

解説:		　二つの文字列 str1 と str2 を比較し、完全に一致するなら
		 1 を、不一致なら 0 を返す。エラーが発生した場合は 0 を
		返す。

================
名称:		&eval
機能:		引数を再評価して実行する。

書式:		&eval command …
引数:		command	コマンド。
返値:		なし。

解説:		　引数を madoka と見なし、変数の展開を行ったのち再実行す
		る。&input で変数名を入力し、その変数の値を得たい場合な
		どに使う。

用例:		&if ( ! &input ) { &end } &eval &cd $_
			# 入力したディレクトリに移動する。
			# ディレクトリ名の代わりに変数名を入力すると、そ
			# の変数の値をディレクトリ名と見なす。
			# 例えば &input で $temp(=/temp) を入力した場合、
			#	&eval &cd $_
			#	↓	$_ を展開
			#	&eval &cd $temp
			#	↓	&eval 実行、$temp を展開
			#	&cd /temp
			# として解釈される。
			# ここで、&eval を使わずに単に &cd $_ としている
			# と、変数は展開されずに、そのまま $temp という
			# ディレクトリに移動することになる。


================
名称:		&exchange-current
機能:		カレントディレクトリを一時的に反対側パスに変更する。

書式:		&exchange-current
引数:		なし。
返値:		なし。

解説:		　&local-path $O とほぼ同じ。反対側ウィンドウが mintarc
		であった場合、書庫内のサブディレクトリに入っていても
		$MINTTMP に移動する。

================
名称:		&exchange-windows
機能:		ウィンドウを交換する。

書式:		&exchange-windows
引数:		なし。
返値:		なし。

解説:		　カーソル側ウィンドウと反対側のパスを交換する。

================
名称:		&exec-j-special-entry
機能:		ディレクトリ移動若しくはファイル判別実行(特殊)。

書式:		&exec-j-special-entry
引数:		なし。
返値:		なし。

解説:		　&ext-exec-or-chdir とほぼ同じであるが、コマンドスイッ
		チ -j が指定された定義を優先して実行する。詳細は
		&ext-exec-or-chdir の項を参照のこと。

================
名称:		&exec-registered-command-menu
機能:		登録コマンドをメニューで選択して実行する。

書式:		&exec-registered-command-menu [-l<n>] num
引数:		-l<n>	初期カーソル位置(行番号)を設定する。
		num	メニュー番号を指定する(1～16)。
返値:		なし。

解説:		　定義ファイルの @exec ～ @ex16 に記述した登録コマンドメ
		ニューのうち、num で指定した番号のメニューを表示し、選択
		したコマンドを実行する。%winn 0 の場合なら、左右カーソル
		キーを入力することで違うメニューに移ることが出来る。

================
名称:		&execute-binary
機能:		マシン語サブルーチンを実行する

書式:		&execute-binary hex …
引数:		hex	16進数で記述されたマシン語サブルーチン
返値:		サブルーチン終了時の d0.w の値(引数が不正な場合は 0)。

解説:		　16進数で記述された数値列を 680x0 マシン語サブルーチン
		と見なし実行する。引数は複数に分けて記述してもよいが、必
		ず 4 桁(1 ワード)単位で記述しなければならない。

		　サブルーチンは先頭アドレスが jsr で呼び出される。なお、
		a0 に先頭アドレス、a1 に末尾アドレスが渡される。サブルー
		チンの終了は rts で行い、その時の d0.w の値が
		&execute-binary の返値となる。

用例:		　break.mis を参照のこと。

================
名称:		&exist
別名:		&arc-exist
機能:		ファイルの有無を調べる。

書式:		&exist [-i | -c] pattern …
引数:		-i	大文字小文字を同一視する。
		-c	大文字小文字を区別する。
		pattern
			パターン。
返値:		存在する場合 1、しない場合 0。

解説:		　ウィンドウのバッファ内にパターンに一致するファイル名が
		あるか調べ、ある場合は 1、ない場合は 0 を返す。

		　ディスク上ではなく mint の管理するバッファを調べるので、
		archive-selector 内でも使用できる。

		　-i、-c オプションを省略した場合、(V)TwentyOne.sys の設
		定を調べ、-C なら -i オプション、+C なら -c オプションが
		指定されたものと見なす。

		　別名の &arc-～ は互換性の為だけに残してあるので、今後
		は使わない方が良い。

================
名称:		&ext-exec
機能:		ファイル判別実行。

書式:		&ext-exec [filename]
引数:		filename
			ファイル名。
返値:		なし。

解説:		　filename で指定されたファイル名について、ファイル内容
		判別、ファイル名判別、拡張子判別などにより定義された内容
		を実行する。

		　filename を省略した場合は &ext-exec-or-chdir と同じ動
		作となる。

================
名称:		&ext-exec-or-chdir
機能:		ディレクトリ移動若しくはファイル判別実行。

書式:		&ext-exec-or-chdir
引数:		なし。
返値:		なし。

解説:		　カーソル行がディレクトリの場合、そのディレクトリに移動
		する。カーソル行がファイルの場合、ファイル内容判別、ファ
		イル名判別、拡張子判別などにより定義された内容を実行する。

		　mint version 2.25 とは違い、&ext-exec-or-chdir 以降に
		記述した命令も必ず実行されるので注意すること。

================
名称:		&ext-help
機能:		拡張子判別実行ヘルプ

書式:		&ext-help [-l<n>]
引数:		-l<n>	初期カーソル位置を指定する(0で表示なし)。省略時
			は1(先頭行)になる。
返値:		なし。

解説:		　カーソル位置のファイルに対し &ext-exec-or-chdir を実行
		した場合の判別定義の内容をウィンドウに表示する。メニュー
		になっているので、カーソルキー等で選択すれば任意の行から
		実行することが出来る。ただし、通常の実行とは違い、シフト
		センスは行われずに必ず選択した行から実行される。

		　'1'～'9' を入力するとショートカットキーとして解釈され、
		ウィンドウの 1～9 行目から直接実行される。

		　'e' 及び 'v' キーを入力することにより、表示中の行番号
		をユーザ変数 MINTHLINE に設定してから >HELP_E の定義を実
		行する。エディタを起動するように記述しておけば、直接定義
		ファイルを編集できる。

================
名称:		&fade-music
別名:		&fadeout-music
機能:		音楽演奏をフェイドアウトする。

書式:		&fade-music
引数:		なし。
返値:		音源ドライバ未常駐時は 0、それ以外は 1。

解説:		　音楽演奏をフェイドアウトし、演奏を停止する。

================
名称:		&file-check
機能:		ファイルの各種情報を調べる。

書式:		&file-check filename
引数:		filename
			ファイル名。
返値:		成功時 1、失敗時 0。

解説:		　指定したファイル名のファイル属性、タイムスタンプ、ファ
		イルサイズ(バイト数)を調べ、それぞれユーザ変数 ATTRIBUTE、
		TIMESTAMP、LENGTH に設定する。成功した場合は 1、それ以外
		の場合は 0 を返す。

用例:		&if ( &file-check $F ) {
			&print  "ファイル名: $F" \
				"サイズ:     $LENGTH バイト" \
				"属性:       $ATTRIBUTE" \
				"更新年月日: $TIMESTAMP"
		}

================
名称:		&file-compare
機能:		左右ウィンドウ内のファイルを比較する。

書式:		&file-compare [-f<fn>] [-d<ts>] [-l<len>] [-m] [-v]
引数:		-f<fn>	ファイル名の比較方法を設定する。<fn> には以下の
			いずれかを指定する。省略時は先頭のものになる。
			exact	厳密に比較する。
			ignore-case
				英字の大文字小文字を同一視して比較する。
			fuzzy	あいまい比較を行う。
		-d<ts>	タイムスタンプの比較方法を設定する。<ts> には以
			下のいずれかを指定する。省略時は先頭のものになる。
			same	完全に同じ値のものを一致と見なす。
			new	反対側パスのファイルより新しいものを一致
				と見なす。
			old	古いものを一致と見なす。
			ignore	値に関わらず常に一致したものと見なす。
			diff	違う値のものを一致と見なす。
			fuzzy	あいまい比較を行う。
		-l<len>	ファイルサイズの比較方法を設定する。<len> には以
			下のいずれかを指定する。省略時は先頭のものになる。
			same	同じサイズのものを一致と見なす。
			big	反対側パスのファイルより大きいものを一致
				と見なす。
			small	小さいものを一致と見なす。
			ignore	値に関わらず常に一致したものと見なす。
			diff	違うサイズのものを一致と見なす。
			fuzzy	あいまい比較を行う。
		-m	強制的にメニューを起動する。
		-v	ファイル名が一致してその他の条件で不一致になった
			場合にコンソールにメッセージを表示する。
返値:		マークした数。

解説:		　カーソルのある側のウィンドウ内のファイルについて、反対
		側ウィンドウにも同じファイルがあれば、(カーソル側の)ファ
		イルをマークする。ファイルを「同じ」と見なす条件は細かく
		設定することが出来る。比較が終了したら、マークしたファイ
		ル数を返す。

		　実行するとメニューが表示されるので、上下カーソルで項目
		を選択し、左右カーソルやスペースで比較方法を選択する。
		RETURN や ENTER を押すと決定となり、比較が実行される。
		ESC でキャンセルできる。

		　引数を指定した場合はメニューは表示されず、すぐに比較が
		開始されるが、-m オプションを併わせて指定すると引数で指
		定した比較方法を初期値として、メニューが表示される。

用例:		&file-compare -f fuzzy -d fuzzy -l fuzzy -m -v
			# 初期値を全てあいまい比較にしてメニュー起動。
			# ファイル名が一致して、他の条件が不一致のものが
			# あれば表示する。

		&reverse-all-file-marks;
		&file-compare;
		&reverse-all-file-marks
			# 反対側と同じファイルのマークを解除。

================
名称:		&file-match
機能:		ファイル内容のパターンマッチを行う。

書式:		&file-match [-i | -c] [-o<n>] pattern … [filename]
引数:		-i	大文字小文字を同一視する。
		-c	大文字小文字を区別する(デフォルト)。
		-o<n>	比較を開始するオフセットを指定する(省略時は 0)。
		pattern	パターン。
		filename
			ファイル名。
返値:		一致時 1、不一致時 0。

解説:		　パターンとファイルの内容を比較し、一致した場合は 1、そ
		れ以外の場合は 0 を返す。ファイル名を省略した場合は前回
		ファイル内容判別が行われた時のファイルが使用される。

================
名称:		&foreach
機能:		変数に単語を順次設定しながらループ実行を行う。

書式:		&foreach [-n] [name] ( [word] … ) { BLOCK }
引数:		-n	範囲指定を抑制する。
		name	ユーザ変数名。
		word	単語。
返値:		なし。

解説:		　word で指定した単語を、name で指定したユーザ変数に設定
		して直後に記述したブロックを実行する。単語を複数指定した
		場合は、各単語を順次設定してブロックを繰り返し実行する。

		　name を省略した場合、単語は $_ に格納される。また、
		word を省略すると変数には何も設定されず、ブロックを無限
		に繰り返して実行される。この場合、&end や &break を呼び
		出したり、終了キーを押さない限りブロックの実行は終了しな
		い。ちなみに、name を指定するか word を省略した場合は
		( ) を省略することが出来る。

		　word に A..Z という形式の、一バイト文字＋".."＋一バイ
		ト文字からなる 4 バイトの単語を指定した場合、範囲指定と
		なり、最初の文字から最後の文字までの全ての一バイト文字が
		指定されたものと見なして、それらの文字を順次変数に設定し
		てブロックを実行する。例えば、word に 1..3 を指定した場
		合、1 2 3 を指定したものと解釈される。3..1 など、逆順の
		指定も可能で、この場合は 3 2 1 というように解釈される。
		-n オプションを指定するとこの機能は抑制される。

		　ループ実行を途中で打ち切りたい場合は BREAK、ESC、
		CTRL-C、CTRL-D のいずれかのキーを押さばよい。

用例:		&foreach ( a b c ) { &print $_ }
			# { &set _ a; &print $_;
			#   &set _ b; &print $_;
			#   &set _ c; &print $_ } と同じ。

		&foreach ( ) { &cursor-down }
			# &cursor-down を実行し続ける。

		&foreach char ( A..C 2..0 ) { … }
			# &foreach char ( A B C 2 1 0 ) { … } と同じ。
			# 単語はユーザ変数 char に設定される。


================
名称:		&get-color-mode
機能:		グラフィック画面の表示色数を収得する。

書式:		&get-color-mode
引数:		なし。
返値:		0	グラフィック無表示。
		1	16 色。
		2	256 色。
		6	65536 色。

解説:		　グラフィック画面の表示色数を調べ、0、1、2、6 の値で返
		す。

================
名称:		&get-media-byte
機能:		指定パスのメディアバイトを収得する。

書式:		&get-media-byte [path]
引数:		path	パス名。
返値:		成功時メディアバイト、失敗時 0。

解説:		　指定したパスのメディアバイトを収得し、その値を返す。パ
		ス名を省略した場合はカレントパスが指定されたものと見なす。

================
名称:		&get-music-status
機能:		音源ドライバの動作状態を調べる。

書式:		&get-music-status
引数:		なし。
返値:		0	対応する音源ドライバが常駐していない。
		1	演奏停止中。
		2	一時停止中。
		3	演奏中。

解説:		　音源ドライバの動作状態を調べる。

================
名称:		&get-volume-name
機能:		指定ドライブのボリュームラベルを収得する。

書式:		&get-volume-name [name] [d:]
引数:		name	ユーザ変数名。
		d:	ドライブ名。
返値:		成功時 1、失敗時 0。

解説:		　d: で指定したドライブのボリュームラベルを収得し、name
		で指定したユーザ変数に設定する。それぞれが省略された場合
		はカレンドドライブ、_ が指定されたものと見なす。成功した
		場合は 1、それ以外の場合は 0 を返す。

用例:		&get-volume-name ${O:d}:; &print $_
			# 反対側パスのボリュームラベルを表示

================
名称:		&getsec
機能:		命令実行時から全チェイン終了までの経過時間を表示する。

書式:		&getsec
引数:		なし。
返値:		なし。

解説:		　この命令を実行してから、全てのチェインが終了するまでの
		に経過した時間を測定し、表示する。

================
名称:		&go-screen-saver
機能:		スクリーンセーバを起動する。

書式:		&go-screen-saver [-z]
引数:		-z	内蔵スクリーンセーバを起動する。
返値:		なし。

解説:		　スクリーンセーバを起動する。

		　通常は >T_DOWN の定義の内容が実行されるが、-z オプショ
		ンが指定された場合、及び、>T_DOWN が未定義の場合は内蔵の
		スクリーンセーバが実行される。また、>T_DOWN 内で
		&go-screen-saver が実行された場合は -z オプションの有無
		に関係なく内蔵のスクリーンセーバが実行される。

用例:		>KEYrdn	-t-	&go-screen-saver	# >T_DOWN 実行
			-c-	&go-screen-saver -z	# 内蔵セーバ実行

		>T_DOWN	------	&crt-write-disable;
				&title-load -n in_the_night.mag;
				&go-screen-saver;	# 内蔵セーバ実行
				&pop-text;
				&end

================
名称:		&goto-cursor
機能:		指定した行位置にカーソルを移動する。

書式:		&goto-cursor num
引数:		num	行位置(1～$ENTRIES)。
返値:		成功時 1、失敗時 0。

解説:		　カーソルを指定した行位置に移動する。

================
名称:		&grow-window
機能:		ウィンドウを一行分広くする。

書式:		&grow-window
引数:		なし。
返値:		成功時 1、失敗時 0。

解説:		　ファイルの一覧を表示するウィンドウの大きさを一行分広く
		する。システム変数 %dirh の値も自動的に更新される。

================
名称:		&gvon
別名:		&gvram-on
機能:		グラフィック画面を閲覧する。

書式:		&gvon
引数:		なし。
返値:		成功時 1、失敗時 0。

解説:		　グラフィック画面を閲覧する。@gvon セクションで定義した
		キーで画面を操作できる。

================
名称:		&gvram-off
機能:		グラフィック画面の表示をオフにする。

書式:		&gvram-off
引数:		なし。
返値:		なし。

解説:		　グラフィック画面の表示をオフにする。

================
名称:		&half
別名:		&set-brightness-to-half
機能:		グラフィック画面の輝度を半分にする。

書式:		&half
引数:		なし。
返値:		なし。

解説:		　グラフィック画面の輝度を(最大輝度に対して)半分にする。

================
名称:		&i-search
別名:		&incremental-search
機能:		ファイルを検索する。

書式:		&i-search [-e[n]] [-r] [-i | -c] [pattern] …
引数:		-e	検索モードを指定する。このオプションを指定しない
			場合は -e0、数字を省略した場合は -e1 となる。
		-e0	通常モード(常に先頭から順方向で検索する)。
		-e1	EMACS モード(現在位置から検索する)。
		-e2	拡張検索モード(現在位置から検索するが、見つから
			ない場合はバッファ先頭または末尾から再検索する)。
		-r	逆方向モード。
		-i	大文字小文字を同一視する。
		-c	大文字小文字を区別する。
		pattern	パターン。
返値:		成功時 1、失敗時 0。

解説:		　ウィンドウのバッファ内からファイルを検索する。引数にパ
		ターンを指定すると直接検索し、パターンを省略すると入力窓
		が開きインタラクティブな検索が行える。

		　-i、-c オプションを省略した場合、%case 0、%case 1 の時
		それぞれ -i、-c が指定されたものと見なす。また、%case 2
		の場合は実行時の (V)TwentyOne.sys の設定を調べ、-C なら
		-i オプション、+C なら -c オプションが指定されたものと見
		なす。

		　パターンを指定した場合、カーソル位置以降のファイルから
		パターンにパターンに一致するファイル名があるか調べ、ある
		場合はカーソルをそのファイルに移動して 1 を返す。ない場
		合は移動せずに 0 を返す。

		　パターンを省略した場合、入力窓が開き、一文字入力するご
		とに、それまでの入力文字列をパターンと見なして遂次に検索
		が行われる。メモリ不足などのエラーが発生すれば 0、それ以
		外の場合は 1 を返す。

		　パターン省略時に -e または -e1 オプションを指定すると、
		カーソルの挙動が MicroEMACS に似た感じになる。-e2 オプシ
		ョンを指定すると、加えて、見つからない場合にバッファ先頭
		(↑方向検索時はバッファ末尾)から再検索するようになる。

		　また、-r オプションを指定すると、初期検索方向を↑方向
		にする。

		　入力したパターンは、ファイル名中のどこかに一致すれば検
		索成功と見なされるが、先頭に '^' を記述するとファイル名
		の先頭から一致しなければ検索成功と見なされないようになる。

			例:	パターン	一致するファイル名
				abc		abcdef xyzabc
				^abc		abcdef

		　[ ' " \ といった記号はパターン内ではメタキャラとして特
		別扱いされ、最初の三種類はそれぞれ ] ' " を、\ は何か一
		文字を入力するまで遂次検索が延期される(この状態は
		「incomplete input(不完全な入力)」として示される)。

		　キー操作は以下の通り。MicroEMACS に似た割り当てとなっ
		ている。

		CTRL+S、CTRL+X、TAB、CTRL+I
			　↓方向次検索。以後のパターン入力時の自動検索を
			↓方向にする。一文字も入力していない場合は、前回
			入力したパターンで検索する。

		CTRL+R、CTRL+E
			　↑方向次検索。以後のパターン入力時の自動検索を
			↑方向にする。一文字も入力していない場合は、前回
			入力したパターンで検索する。

		SPACE
			　カーソル位置のマークを反転し、↓方向次検索。

		SHIFT+SPACE
			　カーソル位置のマークを反転し、↓方向次検索。検
			索が成功したら、見つかったファイル/ディレクトリ
			のマークも反転する。

		CTRL+SPACE
			　カーソル位置のマークを反転する。

		CTRL+H、BS
			　一文字削除。直前に CTRL+S や CTRL+R などの次検
			索を行っていた場合は、次検索を行う前のカーソル位
			置に戻る。

		CTRL+M
			　大文字小文字の同一視(-i)と区別(-c)の切り換えを
			行う。%case 0、%case 1 の場合は同変数の値も変更
			する。パターン入力中に切り換えた場合は多少正確で
			ない動作になることがある。

		CTRL+G
			　中断終了。カーソルを &i-search 実行前の位置に
			戻して終了する。

		ESC、CR、ENTER、その他のコントロールコード
			　確定終了。カーソル位置はそのままで終了する。


================
名称:		&if
機能:		式の値が真の時、直後のブロックを実行する。

書式:		&if [exp] { BLOCK }
引数:		exp	式。
返値:		なし。

解説:		　式の値が真の場合、&if の直後のブロックを実行する。逆に、
		式の値が偽の場合は、&if の直後のブロックは実行せず、無視
		する。

		　式に使用可能な要素は以下の通り。

		・定数
			10 進数
			$ 若しくは 0x から始まる 16 進数
			0b から始まる 2 進数
		・＠変数
			@status		($STATUS)
			@builtin	(内部命令の返値)
			@exitcode	(外部コマンドの返値)
			　四文字以降は省略可能で、@st、@bu、@ex のように
			記述することができる。
		・ファイル検査
			　ファイル検査子を直前に付けたファイル名若しくは
			パス名。使用できるファイル検査子は以下の通り。
			-r	読み込み可能
			-w	書き込み可能
			-x	実行可能
			-s	システム属性
			-h	隠し属性
			-l	シンボリックリンク
			-d	ディレクトリ
			-f	普通のファイル
			-e	ファイル若しくはパスが存在する
			-z	ファイルサイズが 0
			-T	テキストファイル
			-B	バイナリファイル
			　それぞれ、条件が成立する場合は 1、成立しない場
			合は 0 を返す。また、条件が成立した場合はフルパ
			スのファイル名若しくはパス名をユーザ変数 & に設
			定する($& は $MATCH としても参照可能である)。
		・コマンド
		・数	定数、＠変数、ファイル検査、コマンド
		・因子	数、'(' と ')' の対で囲まれた式
		・項	因子、条件演算子で結んだ二つの因子
		・式	項、! 演算子を直前に付けた項

		・単項演算子	!(論理否定)
		・条件演算子	== != < > <= >=

		　演算子及び括弧の評価優先順位は以下の通り。

		( )
		!
		== != < > <= >=

		　なお、式の評価の特例として、exp に定数のみを記述した場
		合は ( exp == @status ) として解釈される。また、exp を完
		全に省略した場合は ( 0 != @status ) として解釈される。

用例:		&if { &print '$STATUS != 0' }
			# 式を省略した形式。

		&if ( @exitcode ) { &print '@exitcode != 0' }
			# ＠変数のみ記述した形式。

		&if ( -d $F ) { &print "$& はディレクトリです" }
			# ファイル検査子の例。

		&if ( ! -w $F ) { &print "$& は書き込み禁止です" }
			# 論理否定の例。

		&get-color-mode;
		&if 1 { &print '16 色モード' }
			# 1 == @status として解釈される。

		&if ( 6 == &get-color-mode ) { &print '64K 色モード' }
			# コマンド実行と条件演算の例。
			# ( &get-color-mode == 6 ) と記述すると、== 6 が
			# &get-color-mode 命令の引数として解釈されてしま
			# うので、必ず数と条件演算子を先に記述すること。

		&if ( -B $F ) { &look-file -d $F }
		&else { &look-file $F }
			# &if ～ &else の例。バイナリファイルなら DUMP
			# 表示で起動する。

		&if	 (@st == 1) { &print '@st = 1' }
		&else-if (@st == 2) { &print '@st = 2' }
		&else		    { &print '@st = その他' }
			# &if ～ &else-if の例。


================
名称:		&information
機能:		デバイス情報表示をトグル切り換えする。

書式:		&information
引数:		なし。
返値:		なし。

解説:		　システム変数 %finf を 0 -> 1 -> 2 -> 0 と切り換える。

================
名称:		&input
別名:		&readline
機能:		行入力を行う。

書式:		&input [-w<n>] [-s"string" …] [user-value]
引数:		-w<n>	入力ウィンドウの幅(桁数)を変更する。<n> には 4～
			94 の範囲で 2 の倍数を指定すること。-w オプショ
			ン省略時は 70 桁になる。なお、この数値はカーソル
			が動く範囲ということで、画面に描画されるウィンド
			ウの幅はそれより 2 桁だけ大きくなる。
		-s"string"
			string で指定した文字列を予めバッファに展開して
			から行入力を行う。-s オプションは複数指定するこ
			とができて、その場合は初期カーソル位置が「最後に
			指定した文字列の先頭」になる(オプション指定が一
			個以下の場合は右端となる)。空文字列も指定できる
			が、その関係で -s と文字列は繋げて記述しなければ
			ならないようになっているので注意すること。
返値:		成功時 1、失敗時 0。

解説:		　ウィンドウをオープンし、その中で一行入力を行う。入力結
		果の文字列は user-value で指定したユーザ変数に格納される
		が、変数名を省略した場合はユーザ変数 _ に格納する。正し
		く格納できた場合は 1 を、それ以外は 0 を返す。

		　空文字列を入力した場合、変数には NUL という文字列が格
		納される。文字列は最大 94 バイトまで入力できる。

用例:		&input -t"短いタイトル" -w12
			# 小さいウィンドウで入力

		&if ( &input -s"foo" ) { &print $_ }
			# 初期カーソル位置は 'o' の右側(文字列末尾)
			# 入力確定時のみ内容を表示

		&input -s"from " -s"to" buf
			# 初期カーソル位置は 't' の上
			# 入力した文字列は $buf で参照可能

		&input -s"" -s"foo"
			# 初期カーソル位置は 'f' の上(左端)
			# 入力した文字列は $_ で参照可能

================
名称:		&instruction-cache-off
機能:		命令キャッシュをオフにする。

書式:		&instruction-cache-off
引数:		なし。
返値:		なし。

解説:		　MPU 内蔵の命令キャッシュをオフにする。

================
名称:		&instruction-cache-on
機能:		命令キャッシュをオンにする。

書式:		&instruction-cache-on
引数:		なし。
返値:		なし。

解説:		　MPU 内蔵の命令キャッシュをオンにする。

================
名称:		&iocs
機能:		IOCS コールを実行する。

書式:		&iocs no,d1,d2,…,d6,d7 str
引数:		no	IOCS コール番号。
		d?	データレジスタに設定する値。
		str	アドレスレジスタ a1 に設定する文字列。
返値:		実行直後のデータレジスタ d0.w の値。

解説:		　指定した値をレジスタにセットして、IOCS コールを実行す
		る。&trap 15,… と同じなので、詳細は &trap の項を参照の
		こと。

================
名称:		&iocs-home
機能:		グラフィック画面の表示位置を変更する。

書式:		&iocs-home x,y
引数:		x	X 座標
		y	Y 座標
返値:		なし。

解説:		　グラフィック画面の表示位置を x、y で指定した座標に変更
		する。

================
名称:		&is-mark
機能:		カーソル側ウィンドウにマークがあるか調べる。

書式:		&is-mark [num]
引数:		[num]	行位置(1～$ENTRIES)。
返値:		マークがある場合 1、ない場合 0。

解説:		　引数を省略した場合、カーソル側ウィンドウに一つでもマー
		クがあるかどうかを調べ、ある場合は 1、ない場合は 0 を返
		す。数値を指定した場合はその行位置のファイルについてのみ
		マークの有無を調べる。

================
名称:		&is-mintarc
機能:		カーソル側ウィンドウが archive-selector か調べる。

書式:		&is-mintarc [-o/l/r/b/w]
引数:		-o	反対側を調べる。
		-l	左側を調べる。
		-r	右側を調べる。
		-b	両方が archive-selector であるか調べる。
		-w	どちらかが archive-selector であるか調べる。
返値:		archive-selector である場合 1、ない場合 0。

解説:		　カーソル側ウィンドウが archive-selector であるか調べ、
		そうである場合は 1、それ以外の場合は 0 を返す。

================
名称:		&is-mount
機能:		仮想ディレクトリがあるか調べる。

書式:		&is-mount
引数:		なし。
返値:		仮想ディレクトリがある場合 1、ない場合 0。

解説:		　全ドライブ中に仮想ディレクトリがあるか調べ、ある場合は 1、
		ない場合は 0 を返す。

================
名称:		&iso9660
機能:		ファイル名が ISO9660 に準拠しているか調べる。

書式:		&iso9660
引数:		なし。
返値:		準拠時 1、それ以外は 0。

解説:		　カーソル行のファイルが IS9660 に準拠しているか調べる。
		準拠していれば 1、それ以外の場合は 0 を返す。

================
名称:		&key-wait
機能:		キー入力を待つ。

書式:		&key-wait
引数:		なし。
返値:		なし。

解説:		　キー入力を待つ。

================
名称:		&load-path-history
機能:		レジュームファイルを読み込む。

書式:		&load-path-history
引数:		なし。
返値:		成功時 1、失敗時 0。

解説:		　環境変数 MINTHIS3 若しくは MINTHIS で指定されたレジュ
		ームファイルからデータを読み込む。起動時には自動的に読み
		込まれるので特に使用する必要はない。

================
名称:		&local-path
機能:		カレントディレクトリを一時的に変更する。

書式:		&local-path path
引数:		path	変更先のパス名。
返値:		なし。

解説:		　カレントディレクトリを path で指定したパスに変更する。
		全てのチェインが終了するとカレントディレクトリは元に戻る。

		　なお、ここで言うカレントディレクトリの変更とは、&chdir
		のようにウィンドウが書き換わるものではなく、OS が認識し
		ているカレントドライブとカレントディレクトリを変更すると
		いうものである。

================
名称:		&look-file
機能:		ファイルを閲覧する。

書式:		&look-file [-4 | -8] [-E | -J | -S] [-v | -d | -c] [-r]
			[-b] [-e] [-C | -^] [-w<w>,<s>] [-o<path>] file
引数:		-4	タブの桁数を 4 にする。
		-8	タブの桁数を 8 にする。
		-E	二バイト文字を EUC で表示する(保存)。
		-J	二バイト文字を JIS で表示する(保存)。
		-S	二バイト文字をシフト JIS で表示する(保存)。
		-v	VIEW 表示で起動する(保存)。
		-d	DUMP 表示で起動する(保存)。
		-c	CDMP 表示で起動する(保存)。
		-r	一部の二バイト文字を一バイト文字に変換して表示す
			る(保存)。
		-b	バックスペースを除去しない。
		-e	ESC シーケンスを除去しない。
		-C	カラー表示で起動する。
		-^	同上。
		-w<w>,<s>
			DUMP 表示での幅とデータサイズを指定する(保存)。
			<w>、<s> にはそれぞれ幅、サイズを 1 以上の値で指
			定する。なお、<w> と <s> の合計は 86 以下でなけれ
			ばならない。
		-o<path>
			ファイル書き出しを行う時のデフォルトのパス名若し
			くはファイル名。
		file	ファイル名。
返値:		成功時 1、失敗時 0。

解説:		　ファイルを閲覧する。@look セクションで定義したキーで操
		作できる。

		　引数の解説に『(保存)』とあるものは、一度指定すれば以後
		の実行時に省略しても自動的に指定されたものと見なされる。
		これを取り止めるには、相反するオプションを指定するか、キ
		ー操作で機能を解除すればよい。

================
名称:		&lzh-selector
機能:		LZH アーカイブセレクタ起動

書式:		&lzh-selector filename
引数:		filename
			ファイル名。
返値:		成功時 1、失敗時 0。

解説:		　LZH 形式書庫のアーカイブセレクタを起動する。

================
名称:		&madoka
機能:		madoka の外部ファイルを実行する。

書式:		&madoka filename [arg] …
引数:		filename
			スクリプトファイル名。
		arg	スクリプトに対する引数。
返値:		なし。

解説:		　filename で指定した外部ファイルに記述した madoka スク
		リプトをロードし、実行する。

		　ユーザ変数 argv0 にスクリプトファイル名、argv にスクリ
		プトに対する引数が設定される。arg を複数指定した場合は空
		白で繋げられて一つの文字列になる。

		　スクリプトファイルの形式は以下の通り。

		#!madoka
		# 先頭行の行頭に必ず「#!madoka」と記述する。
		# '#' から始まる行はコメント行。
		# コメント行の次に、コマンドスイッチと本文を記述する。
		# 以下は必ず行頭に一個以上のタブを入れること。
			-api \
			&print "Manabe an Angel";
			&end

================
名称:		&make-dir-and-move
機能:		ディレクトリを作成若しくはファイルを移動する。

書式:		&make-dir-and-move
引数:		なし。
返値:		なし。

解説:		　マークがある場合は &move を、ない場合は &md を呼び出す。
		引数を指定した場合、呼び出した命令にそのまま渡され、返値
		はその命令のものがそのまま返る。詳細についてはそれぞれの
		命令の項を参照すること。

================
名称:		&maketmp
機能:		テンポラリファイルを作成する。

書式:		&maketmp [name [filename]]
引数:		name	ユーザ変数名。
		filename
			テンポラリファイル名。
返値:		成功時 1、失敗時 0。

解説:		　$MINTTMP ディレクトリにテンポラリファイルを作成し、ユ
		ーザ変数 name にそのファイル名を設定する。正常に作成でき
		た場合は 1 を返し、それ以外は 0 を返す。

		　テンポラリファイル名は指定したファイル名中の数字を加算
		していき、ユニークなファイル名に書き換えられて作成される。
		既存のファイルを上書きしてテンポラリファイルを作成してし
		まうことはない。

		　変数名やテンポラリファイル名を省略した場合は、それぞれ
		_ と mint0000.tmp が指定されたものと見なされる。変数名を
		省略してファイル名を指定することは出来ない。

		　作成されたテンポラリファイルは何もせずに直ちにクローズ
		される。シェルのリダイレクト >! や >> を使えば、ある程度
		安全にテンポラリファイルを扱える。

================
名称:		&mark
別名:		&mark-forward
機能:		ファイル/ディレクトリをマークする。

書式:		&mark [-i | -c] [pattern] …
引数:		-i	大文字小文字を同一視する。
		-c	大文字小文字を区別する。
		pattern	パターン。
返値:		パターン省略時は &cursor-down の返値そのもの、パターン指
		定時はマークした数。

解説:		　パターンを省略した場合、カーソル位置のファイル若しくは
		ディレクトリのマークを反転し、カーソルを一つ下に移動し、
		(&cursor-down を呼び出す)、&cursor-down の返値をそのまま
		返す。

		　パターンを指定した場合、ファイル名が一致するファイル及
		びディレクトリのマーク状態を反転し、その数を返す。

		　-i、-c オプションを省略した場合、(V)TwentyOne.sys の設
		定を調べ、-C なら -i オプション、+C なら -c オプションが
		指定されたものと見なす。

================
名称:		&mark-all
機能:		全てのファイル/ディレクトリをマークする。

書式:		&mark-all
引数:		なし。
返値:		なし。

解説:		　カーソル側ウィンドウの全てのファイル及びディレクトリを
		マークする。

================
名称:		&mark-all-files
機能:		全てのファイルをマークする。

書式:		&mark-all-files
引数:		なし。
返値:		なし。

解説:		　カーソル側ウィンドウの全てのファイルをマークする。

================
名称:		&mark-reverse
機能:		カーソルを一つ上に移動し、マークを反転する。

書式:		&mark-reverse
引数:		なし。
返値:		成功時 1、失敗時 0。

解説:		　カーソル一つ上に移動し、移動先のファイル若しくはディレ
		クトリのマークを反転する。&mark でマークし過ぎた分を取り
		消すのに用いると便利である。

================
名称:		&mark-upper
機能:		一つ上のファイル/ディレクトリのマークを反転する。

書式:		&mark-upper
引数:		なし。
返値:		なし。

解説:		　一つ上のファイル若しくはディレクトリのマークを反転する。
		&mark-reverse とは違いカーソルは移動しない。

================
名称:		&mask
別名:		&mask-regexp
機能:		パスマスクを設定する。

書式:		&mask [-i | -c] [-l<n>] [-i] pattern …
引数:		-i	大文字小文字を同一視する。
		-c	大文字小文字を区別する。
		-l<n>	メニューモードでの初期カーソル位置(行番号)を設定
			する。<n> には 0～選択肢の数を指定すること。-l
			オプション省略時は一行目にカーソルが置かれる。
		-i	大文字小文字を同一視する。
		pattern	パターン。
返値:		成功時 1、失敗時 0。

解説:		　指定したパターンでパスマスクを設定する。パターンを省略
		した場合はメニューで選択する。

		　パターン省略時のメニューは @wild セクションで定義する
		ことが出来る。

		　-i、-c オプションを省略した場合、(V)TwentyOne.sys の設
		定を調べ、-C なら -i オプション、+C なら -c オプションが
		指定されたものと見なす。

================
名称:		&match
機能:		文字列のパターンマッチを行う。

書式:		&match [-i | -c] pattern … [str]
引数:		-i	大文字小文字を同一視する。
		-c	大文字小文字を区別する(デフォルト)。
		pattern	パターン。
		str	文字列(省略時は $_ が使用される)。
返値:		一致時 1、不一致時 0。

解説:		　指定した文字列がパターンに一致するか調べ、一致した場合
		は 1、不一致の場合は 0 を返す。文字列を省略した場合はユ
		ーザ変数 _ の内容を展開し、それを文字列と見なす。

================
名称:		&max
別名:		&set-brightness-to-max
機能:		グラフィック画面の輝度を半分にする。

書式:		&max
引数:		なし。
返値:		なし。

解説:		　グラフィック画面の輝度を最大にする。

================
名称:		&md
別名:		&mkdir, &make-dirs
機能:		ディレクトリを作成する。

書式:		&md [dirname] …
引数:		dirname	ディレクトリ名。
返値:		全て正常終了した場合はそのディレクトリ数、一度でもエラー
		が発生した場合は 0。

解説:		　dirname で指定したディレクトリを作成する。

		　dirname を省略した場合、ウィンドウが開くので、ディレク
		トリ名を入力するとそのディレクトリを作成する(複数指定可)。
		この時、以下の条件を見たすと作成したディレクトリに移動す
		る。
			・入力したディレクトリ名が一つだけ
			・そのディレクトリの作成に成功した
			・%mdmd 1 に設定されている

		　全て正常終了した場合はそのディレクトリ数を、一度でもエ
		ラーが発生した場合は 0 を返す。

================
名称:		&menu
機能:		メニュー選択を行う。

書式:		&menu [-l<n>] [-x<x0>] [-y<y0>] \
			1"one" 2"two" …
引数:		-l<n>	初期カーソル位置(行番号)を設定する。<n> には 0～
			選択肢の数を指定すること。-l オプション省略時は
			一行目にカーソルが置かれる。<n> に 0 を指定した
			場合はカーソルは描画されず、有効なキー入力を行っ
			た時に初めて描画される。
		-x<x0>	ウィンドウを表示する X 座標を指定する。<x0> には
			0～90 の範囲で 2 の倍数を指定すること。-x オプシ
			ョンを省略すると X 座標はセンタリングされる。
		-y<y0>	ウィンドウを表示する Y 座標を指定する。<y0> には
			0～29 の数を指定すること。-y オプション省略時は
			8 になる。
返値:		選択肢の行番号(1～)、キャンセルした場合は 0。

解説:		　選択肢を並べたウィンドウをオープンし、カーソル若しくは
		ショートカットキーにより選択を行う。選択が行われた場合、
		その選択肢の行番号(1～)が返る。ESC キーなどでキャンセル
		された場合は 0 が返る。

		　選択肢は、先頭の 1 バイトにショートカットキー、それに
		続く文字列に選択肢の内容を指定する。選択肢は 1～27 個ま
		で指定できる。

		　mint version 2.25 との互換性から、-t オプション及び選
		択肢の引数の末尾に ',' があると削除されるので、本当に文
		字列の末尾に ','を置きたい場合は -t"abc,," x"123,," とい
		うように、',' を二つ連続して付けること。

		　なお、mint version 2.25 では選択肢同士を ',' で繋げて
		記述することが出来たが、現在は出来なくなっている(全体で
		一つの選択肢として解釈される)ので、',' は空白に置き換え
		ておく必要がある。

用例:		&menu 1"one" 2"tow" 3"three";
		&if    (1 == @st) { &print "one" }
		&elsif (2 == @st) { &print "two" }
		&elsif (3 == @st) { &print "three" }

		(上と同じ)
		&menu	1"one" \
			2"two" \
			3"three";
		&if (1 == @st) { &print "one" }
		…

		(オプションの順番は自由)
		&menu -x60 -t" title " -y0x10 \
			1"one" \
			…

================
名称:		&mioff
別名:		&gvram-text-blend-off
機能:		テキスト画面とグラフィック画面の半透明合成を解除する。

書式:		&mioff
引数:		なし。
返値:		成功時 1、失敗時 0。

解説:		　&mion で設定したテキスト画面とグラフィック画面の半透明
		合成を解除する。&mion を実行していなかった場合は 0 を、
		それ以外の場合は 1 を返す。

================
名称:		&mion
別名:		&gvram-text-blend-on
機能:		テキスト画面とグラフィック画面を半透明で合成する。

書式:		&mion
引数:		なし。
返値:		成功時 1、失敗時 0。

解説:		　テキスト画面とグラフィック画面を半透明で合成する。既に
		&mion を実行していた場合は 0 を、それ以外の場合は 1 を返
		す。

================
名称:		&mono
別名:		&gvram-to-monochrome
機能:		グラフィック画面をモノクロにする。

書式:		&mono
引数:		なし。
返値:		成功時 1、失敗時 0。

解説:		　グラフィック画面をモノクロ表示にする。表示色数モードが
		16 色と 256 色の場合はパレット操作でモノクロにするが、
		65536 色の場合は GVRAM を直接書き換える。

================
名称:		&move
機能:		ファイル/ディレクトリを移動する

書式:		&move [[-d…] path] [-j] [-s<mode>]
引数:		-d… path
			パス名。
		path	パス名。
		-j	ディレクトリを作成しない。
		-s<mode>
			同名ファイルが存在した場合の処理の指定。
返値:		成功時 1、失敗時 0。

解説:		　マークしたファイル及びディレクトリを、path で指定した
		ディレクトリに移動する。詳細は &copy の項を参照のこと。

		　-j オプションを指定した場合、移動先にサブディレクトリ
		を作らず、マークファイル及びマークしたディレクトリ内の
		ファイルを指定した移動先ディレクトリ自体に移動する。空に
		なったディレクトリは自動的に削除される(移動先にはディレ
		クトリは作られない)。

		　なお、dos_mvdir.r が常駐している場合は、同じドライブへ
		の移動は同プログラムが提供するファンクションコールにより、
		高速な移動が可能となる(ただしディスクを破壊する危険があ
		るので、常駐させる場合は十分注意すること)。

================
名称:		&move-to-history-menu
機能:		ディレクトリ履歴を選択してファイルを移動する。

書式:		&move-to-history-menu [-j] [-s<mode>] [-l<n>] [-o]
引数:		-j	ディレクトリを作成しない
		-s<mode>
			同名ファイルが存在した場合の処理の指定。
		-l<n>	初期カーソル位置を指定する(0で表示なし)。省略時
			は1(先頭行)になる。
		-o	反対側ウィンドウの履歴から選択する。
返値:		成功時 1、失敗時 0。

解説:		　過去に移動した事のあるディレクトリの一覧を出し、選択し
		たディレクトリに、マークしたファイル及びディレクトリを移
		動する。詳細は &move 及び &path-history-menu の項を参照
		のこと。

================
名称:		&move-to-registered-path-menu
機能:		登録パスをメニューで選択してファイルを移動する。

書式:		&move-to-registered-path-menu [-j] [-s<mode>] [-l<n>] num
引数:		-j	ディレクトリを作成しない。
		-s<mode>
			同名ファイルが存在した場合の処理の指定。
		-l<n>	初期カーソル位置(行番号)を設定する。
		num	メニュー番号を指定する(1～16)。
返値:		成功時 1、失敗時 0。

解説:		　定義ファイルの @jump ～ @jm16 に記述した登録パスメニュ
		ーのうち、num で指定した番号のメニューを表示し、選択した
		パスに、マークしたファイル及びディレクトリをコピーする。
		詳細は &move の項を参照のこと。

================
名称:		&mpu-power
別名:		&cpu-power
機能:		MPU POWER 若しくはキャッシュ状態を表示する。

書式:		&mpu-power
引数:		なし。
返値:		なし。

解説:		　MPU が 68000～68010 の場合はマシンのパワーを測定し、
		%6502 1 なら画面左上に表示する。表示される値は無負荷状態
		の 68000(10MHz)に対する比率であるが、あまりあてにはしな
		いこと。計測に時間もかかるので使用しないことを勧める。

		　MPU が 68020 以上の場合は MPU 内蔵キャッシュのオン/オ
		フの状態を調べ、%6502 1 なら画面左上に、%6502 2 なら
		cplp 行右端に表示する。

		　画面描画の際に自動的に呼び出されるので、通常はこの命令
		を使用する必要はない。

================
名称:		&msdos
機能:		ファイル名が MS-DOS に準拠しているか調べる。

書式:		&msdos
引数:		なし。
返値:		準拠時 1、それ以外は 0。

解説:		　カーソル行のファイルが MS-DOS に準拠しているか調べる。
		準拠していれば 1、それ以外の場合は 0 を返す。

================
名称:		&newer-file
機能:		ファイルが新しいかどうか調べる。

書式:		&newer-file file1 file2
引数:		file1	比較元ファイル。
		file2	比較先ファイル。
返値:		新しい場合は 1、それ以外は 0。

解説:		file1 で指定したファイルが file2 で指定したファイルより
		新しいかどうかを調べ、新しい場合は 1、それ以外は 0 を返
		す。

================
名称:		&nop
機能:		何もしない。

書式:		&nop
引数:		なし。
返値:		なし。

解説:		　何もしない。以下のような場合に使うとよい。

		　mint の不具合により構文解析が期待通りに動作しない時、
		外部コマンドの直後や改行の前に &nop を入れると動作するよ
		うになることがある。

		　TV コントロールに相当するキーに対して定義しておくと、
		環境の違いなどで TV コントロールを行うつもりで押したキー
		が普通のキー入力と同じように扱われてしまった時、余計な動
		作を行わない。

================
名称:		&older-file
機能:		ファイルが古いかどうか調べる。

書式:		&older-file file1 file2
引数:		file1	比較元ファイル。
		file2	比較先ファイル。
返値:		古い場合は 1、それ以外は 0。

解説:		file1 で指定したファイルが file2 で指定したファイルより
		古いかどうかを調べ、新しい場合は 1、それ以外は 0 を返す。

================
名称:		&online-switch
機能:		システム変数をメニュー形式で変更する。

書式:		&online-switch
引数:		なし。
返値:		なし。

解説:		　一部のシステム変数をメニューで選択して変更する。

================
名称:		&palet0-down
機能:		テキストパレット 0 を一段階暗くする。

書式:		&palet0-down
引数:		なし。
返値:		なし。

解説:		　システム変数 %col0 の値を RGB(1,1,1) だけ小さい値に変
		更し、その値をテキストパレット 0 に設定する。

================
名称:		&palet0-set
機能:		テキストパレット 0 を設定する。

書式:		&palet0-set
引数:		なし。
返値:		なし。

解説:		　システム変数 %col0 の値をテキストパレット 0 に設定する。

================
名称:		&palet0-system
機能:		テキストパレット 0 をシステム標準値に戻す。

書式:		&palet0-system
引数:		なし。
返値:		なし。

解説:		　&palet0-set などで変更したテキストパレット 0 の値を、
		SRAM のメモリスイッチに記憶されている標準値に戻す。

================
名称:		&palet0-up
機能:		テキストパレット 0 を一段階明るくする。

書式:		&palet0-up
引数:		なし。
返値:		なし。

解説:		　システム変数 %col0 の値を RGB(1,1,1) だけ大きい値に変
		更し、その値をテキストパレット 0 に設定する。

================
名称:		&palet-set
機能:		テキストパレットを設定する。

書式:		&palet-set
引数:		なし。
返値:		なし。

解説:		　システム変数 %col0～%col3 の値をテキストパレット0～3に
		設定する。ただし、%col0 は &mion 時のみ有効で、&mioff 時
		はシステム設定値(SRAM保存値)が設定される。

		　この命令は試験的な実装のため、有用でないと判断された場
		合は削除または仕様の変更が行われる可能性がある。emacs
		ディレクトリの強調、補完用ファイルには追加されていない。

================
名称:		&path-history-menu
機能:		ディレクトリ履歴を選択して移動する。

書式:		&path-history-menu [-s] [-l<n>] [-o]
引数:		-s	実際に移動はせずに、ユーザ変数 _ にパス名を設定
			する。
		-l<n>	初期カーソル位置を指定する(0で表示なし)。省略時
			は1(先頭行)になる。
		-o	反対側ウィンドウの履歴から選択する。
返値:		成功時 1、失敗時 0。

解説:		　過去に移動した事のあるディレクトリの一覧を出し、選択し
		たディレクトリに移動する。正常終了した場合は 1、取り消し
		た場合は 0 を返す。

		　%his2 1 の場合、カーソル側ウィンドウの履歴から選択する
		ことになるが、左右カーソルキーを押すと反対側ウィンドウの
		履歴に切り替わる。また、-o オプションを指定した場合は最
		初から反対側ウィンドウの履歴が表示される。

		　なお、選択文字はシステム変数 hisc で変更できる。

================
名称:		&pause-music
機能:		音楽の演奏を一時停止する。

書式:		&pause-music
引数:		なし。
返値:		音源ドライバ未常駐時は 0、それ以外は 1。

解説:		　音楽の演奏を一時停止する。

================
名称:		&pdx-filename
機能:		データファイルの付属ファイル名を収得する。

書式:		&pdx-filename filename
引数:		filename
			データファイル名。
返値:		成功時 1、失敗時 0。

解説:		　指定したファイルが .mdx/.mdr/.mdz/.mdc データであれば、
		そのデータが参照する .pdx のファイル名をユーザ変数 _ に
		設定し、1 を返す。エラーが発生した時はユーザ変数 _ をク
		リアし、0 を返す。.pdx ファイル名に拡張子がなかった場合
		は ".pdx" を補完する。

		　指定したファイルが .zms/.zmd データであれば、そのデー
		タが参照する .zpd のファイル名について同様の処理を行う。
		.zpd ファイル名に拡張子がなかった時は ".zpd" を補完する。
		Z-MUSIC v3 の .zmd データは真面目に処理していないのでフ
		ァイルによっては期待通りに動作しない。

		　指定したファイルが .scm データであれば、そのデータが参
		照する一つ目の .scp のファイル名について同様の処理を行う。
		但し、ドライバが拡張子の補完を行わないので、本命令でも
		".scp" は補わない。

		　指定したファイルが .kdd データであれば、そのデータが参
		照する音楽データのファイル名について同様の処理を行う。但
		し、KDD の仕様により拡張子は一切補完されない。

仕様:		　.mdx/.mdr/.mdz/.kdd/.zms については指定されたファイル
		名の拡張子でデータ形式を判別する。それ以外はファイル内容
		を見て判別する。

================
名称:		&play-music
機能:		音楽の演奏を開始する。

書式:		&play-music
引数:		なし。
返値:		音源ドライバ未常駐時は 0、それ以外は 1。

解説:		　音楽の演奏を開始する。

================
名称:		&pop-text
機能:		表示中のタイトル画像を消去する。

書式:		&pop-text
引数:		なし。
返値:		なし。

解説:		　テキスト画面に表示しているタイトル画像を消去し、テキス
		ト画面の内容を元に戻す。テキストパレットが変更されていた
		場合はそれも戻す。&title-load を -n オプションを指定して
		実行した後に使用すること。

		　なお、テキスト画面を初期化する類の命令からも自動的に呼
		び出される。

用例:		-api \
		&title-load -n foo.mag;
		fcp $M $O;
		&pop-text;
		&reload -d2;

================
名称:		&popd
機能:		ディレクトリスタックからパスを取り出して移動する。

書式:		&popd
引数:		なし。
返値:		成功時 1、失敗時 0。

解説:		　&pushd によってディレクトリスタックに積んだパスを取り
		出し、そのパスに移動する。取り出したパスはディレクトリス
		タックから除かれる。

================
名称:		&prchk
別名:		&keep-check
機能:		指定ファイル名のプロセスがあるか調べる。

書式:		&prchk [-i | -c] filename
引数:		-i	大文字小文字を同一視する。
		-c	大文字小文字を区別する。
		filename
			実行ファイル名。
返値:		プロセスがある場合 1、ない場合 0。

解説:		　filename で指定したプロセスがメモリ上に存在するか調べ、
		ある場合は 1、ない場合は 0 を返す。ファイル名の拡張子は
		省略できない。

		　検索対象は自分自身(mint)、自分自身の祖先、常駐プログラ
		ムである。

		　-i、-c オプションを省略した場合、(V)TwentyOne.sys の設
		定を調べ、-C なら -i オプション、+C なら -c オプションが
		指定されたものと見なす。

================
名称:		&prefix
機能:		２ストローク以上のキーバインドを指定する。

書式:		&prefix [-n] num …
引数:		-n	直後のキー入力時に画面を初期化しない。
		num	プリフィックス番号(1 <= n <= 8)。
返値:		なし。

解説:		　C-x C-c や M-x などの２ストローク以上のキーバインドを
		指定する。この命令を実行するとフラグがセットされ、直後の
		キー入力において -&n の記述された行を優先して実行する。

================
名称:		&print
別名:		&ask-yn
機能:		文字列を表示してキー入力を待つ。

書式:		&print [-s<sec>] [-] [str] …
引数:		-s<sec>	最大待機時間を指定する(1/100 秒単位)。
		-	以降の引数を文字列と見なし、オプション解析を打ち
			切る。
		str	文字列。
返値:		CR、Y、y、SPACE(%sp_y 1 の場合のみ)で終了した場合は 1、
		それ以外の場合は 0。

解説:		　ウィンドウを開き、その中に文字列を表示してキー入力を待
		つ。CR、Y、y、SPACE(%sp_y 1 の場合のみ)が入力された場合
		は 1、それ以外の場合は 0 を返す。

================
名称:		&pushd
機能:		現在のパスをディレクトリスタックに積んでから移動する。

書式:		&pushd [-] [d:] [path]
引数:		-	$OLDPWD に移動する。
		d:	指定したドライブのカレントディレクトリに移動する。
		path	指定したパスに移動する。
返値:		成功時 1、失敗時 0。

解説:		　カレントディレクトリをディレクトリスタックに積み、path
		で指定したディレクトリに移動する。移動先ディレクトリの指
		定には &cd で指定できる方法が使用できる。

================
名称:		&quick-exit
機能:		mint を終了する。

書式:		&quick-exit [path]
引数:		path	終了パス名。
返値:		なし。

解説:		　カレントディレクトリを path で指定したディレクトリに変
		更してから mint を終了する。path を省略した場合は起動時
		のカレントディレクトリに移動する。

================
名称:		&quit
機能:		終了パスを選択して mint を終了する。

書式:		&quit
引数:		なし。
返値:		なし。

解説:		　カレントディレクトリをメニューで選択したディレクトリに
		変更してから mint を終了する。

================
名称:		&re-mount
機能:		&un-mount で解除した仮想ディレクトリを元に戻す。

書式:		&re-mount
引数:		なし。
返値:		なし。

解説:		　&un-mount で解除した仮想ディレクトリを元に戻す。実行後
		に自動的に &drive-check が呼び出される。

================
名称:		&reload
機能:		ディレクトリを読み込む。

書式:		&reload [-d/d1/d2]
引数:		-d	両方のディレクトリを読み込む。
		-d1	カーソル側ウィンドウのディレクトリを読み込む。
		-d2	反対側ウィンドウのディレクトリを読み込む。
返値:		なし。

解説:		　指定したウィンドウのディレクトリを読み込み、表示する。
		ファイル情報が変更されたのに画面が書き換わらない場合に使
		用する。この際、マーク情報は消去される。

		　引数省略時は -d1 が指定されたものと見なされる。

		　%moct 0 に設定して自動リロードを使用していない場合や、
		使用していてもメディアの状態変化を感知できない場合などに
		手動で呼び出すことでリロードを行うことも出来る。

		　ディレクトリのリロードは &reload 命令を呼び出すほかに、
		コマンドスイッチに -d、-d1、-d2 を指定することでも実行で
		きる。両者は若干動作が違うので、状況により使い分けると
		よい。

================
名称:		&ren
別名:		&rename
機能:		ファイル名を変更する。

書式:		&rename old new
引数:		old	変更元ファイル名。
		new	変更先ファイル名。
返値:		成功時 1、失敗時 0。

解説:		　old で指定したファイルのファイル名を new で指定したも
		のに変更する。成功した場合は 1、それ以外の場合は 0 を返
		す。

================
名称:		&rename-marked-files-or-directory
機能:		マークファイル/ディレクトリの情報を一括編集する。

書式:		&rename-marked-files-or-directory
引数:		なし。
返値:		成功時 1、失敗時 0。

解説:		　マークしたファイル及びディレクトリのファイル情報を一括
		して変更する。%oren 1 の設定にしておけばマーク時は自動的
		にこの命令が呼び出されるので定義ファイルの記述が楽である。

		　実行するとメニューが表示されるので、上下カーソルで項目
		を選択し、左右カーソルやスペースで動作モードを選択する。
		タイムスタンプは右カーソルを押すと日付、時刻の編集モード
		に入る。RETURN や ENTER を押すと決定となり、一括変更が実
		行される。ESC でキャンセルできる。

================
名称:		&rename-menu
機能:		ファイル/ディレクトリの情報を編集する。

書式:		&rename-menu
引数:		なし。
返値:		成功時 1、失敗時 0。

解説:		　カーソル位置のファイル若しくはディレクトリのファイル情
		報を変更する。ファイル名、ファイル属性、タイムスタンプが
		変更できる。

		　実行するとメニューが表示されるので、上下カーソルで項目
		を選択し、左右カーソルやスペースで動作モードを選択する。
		RETURN や ENTER を押すと決定、ESC でキャンセルとなる。

================
名称:		&reset
機能:		ソフトウェアリセットを行う。

書式:		&reset
引数:		なし。
返値:		なし。

解説:		　ソフトウェアリセットを行う。本当にリセットがかかるので
		十分注意すること。

================
名称:		&reverse-all-file-marks
機能:		全てのファイルのマークを反転する。

書式:		&reverse-all-file-marks
引数:		なし。
返値:		なし。

解説:		　カーソル側ウィンドウの全てのファイルのマークを反転させ
		る。既にマークされていたファイルはマークが解除され、そう
		でないファイルはマークされる。ディレクトリのマークは一切
		変更されない。

================
名称:		&reverse-all-marks
機能:		全てのファイル/ディレクトリのマークを反転する。

書式:		&reverse-all-marks
引数:		なし。
返値:		なし。

解説:		　カーソル側ウィンドウの全てのファイル及びディレクトリの
		マークを反転させる。既にマークされていたファイルやディレ
		クトリはマークが解除され、そうでないものはマークされる。

================
名称:		&rm
別名:		&del
機能:		ファイル/ディレクトリを強制的に削除する。

書式:		&rm [filename] …
引数:		fileneme
			削除するファイル名若しくはディレクトリ名。
返値:		なし。

解説:		　file で指定したファイル若しくはディレクトリを強制的に
		削除する。一切の表示や確認を行わないので注意すること。デ
		ィレクトリのリロードも行わないので、必要な場合は &reload
		を使用すること。

================
名称:		&rnd
機能:		擬似乱数を得る。

書式:		&rnd [name] num
引数:		name	ユーザ変数名。
		num	最大値(1 <= n <= 65535)。
返値:		成功時 1、失敗時 0。name 省略時は擬似乱数の値。

解説:		　1 以上 n 以下の擬似乱数を求め、name で指定したユーザ変
		数に格納する。成功した場合は 1、それ以外の場合は 0 を返
		す。name を省略した場合は乱数がユーザ変数ではなく、返値
		($STATUS)として返される。

		　疑似乱数の品質は浮動小数点演算パッケージ(FLOATn.X)に依
		存する。

用例:		&rnd 3;
		&if    (1 == @st) { &print "one" }
		&elsif (2 == @st) { &print "two" }
		&elsif (3 == @st) { &print "three" }

		&rnd num 10;
		&print $num;

================
名称:		&rotate-gvram-ccw
機能:		グラフィック画面を反時計周りに 90 度回転させる。

書式:		&rotate-gvram-ccw
引数:		なし。
返値:		成功時 1、失敗時 0。

解説:		　グラフィック画面に表示している内容を、反時計周りに 90
		度回転させる。

================
名称:		&rotate-gvram-cw
機能:		グラフィック画面を時計周りに 90 度回転させる。

書式:		&rotate-gvram-cw
引数:		なし。
返値:		成功時 1、失敗時 0。

解説:		　グラフィック画面に表示している内容を、時計周りに 90 度
		回転させる。

================
名称:		&save-path-history
機能:		レジュームファイルを書き出す。

書式:		&save-path-history
引数:		なし。
返値:		成功時 1、失敗時 0。

解説:		　環境変数 MINTHIS3 若しくは MINTHIS で指定されたレジュ
		ームファイルにデータを書き出す。終了時には自動的に書き出
		されるので特に使用する必要はない。

================
名称:		&scsi-check
機能:		SCSI の接続機器を調べる。

書式:		&scsi-check
引数:		なし。
返値:		なし。

解説:		　SCSI に接続されている機器を調べて表示する。

================
名称:		&scsi-menu
機能:		SCSI ID を選択する。

書式:		&scsi-menu [-a]
引数:		-a	全ての ID を強制的に表示する。
返値:		成功時 1、失敗時 0。

解説:		　SCSI に接続されている機器をメニューで選択し、選択した
		ID 番号(0～15)をユーザ変数 _ に設定する。成功した場合は
		1、それ以外の場合は 0 を返す。

		　通常は機器が接続されていない ID やイニシエータ(本体)は
		選択肢に出ないが、-a オプションを指定すると全ての ID が
		選択肢に出る。

		　初回の実行時や -a オプション指定時には機器の接続状況を
		調べるのに時間がかかり、メニューがなかなか表示されないが
		おとなしく待っていること。一度実行すると接続状況を記憶す
		るので、次回からは直にメニューが表示されるようになる。
		&scsi-check を実行しても同じである。

		# ちなみに、機器未接続 ID が多いほど時間がかかる。

================
名称:		&set
機能:		システム変数若しくはユーザ変数に値を設定する。

書式:		&set [-c] name value …
引数:		-c	システム変数に値を設定した場合、終了時に
			&clear-and-redraw を呼び出す。
		name	システム変数名若しくはユーザ変数名。
		value	変数に設定する値。
返値:		成功時 1、失敗時 0。

解説:		　name で指定したシステム変数若しくはユーザ変数に value
		の値を設定する。正常終了した場合は 1 を、それ以外の場合
		は 0 を返す。

		　value は複数個指定することができ、その場合は各々の引数
		は空白(' ')で連結されて一つの文字列として解釈される。

================
名称:		&set-crtc
機能:		CRTC の設定を変更する。

書式:		&set-crtc [r<nn>=]num[,num…] …
引数:		num	CRTC のレジスタに設定する値。
返値:		成功時 1、失敗時 0。

解説:		　CRTC R00～R23 に指定した数値を設定する。指定しなかった
		レジスタは無視する。数値を ',' で区切れば連続したレジス
		タに順番に指定できる。また、r<nn>=(<nn>は十進二桁 00～23
		で示したレジスタ番号)で次に設定するレジスタ番号を指定で
		きる。正しく設定できた場合は 1、それ以外は 0 を返す。

		　なお、この命令で特殊な画面モードにした場合、自動画面モ
		ード制御機能が働くと通常の画面モードに戻ってしまうので、
		%agmd 1 にする必要がある。

仕様:		　0xffff は指定できない。CRTC R20 を変更した場合、VC R0
		にも同じ画面モードを設定する。

用例:		#!madoka
		#	CRT モードを 640x400 にする。
			-api \
			&set agmd 1;
			&set-crtc 116,11,19,99,440,6,32,432 r20=0x315
		# EOF

================
名称:		&set-current-to-opposite
機能:		カレントディレクトリを反対側パスに変更する。

書式:		&set-current-to-opposite
引数:		なし。
返値:		なし。

解説:		　&exchange-current とほぼ同じ。ただし、チェイン終了後も
		カレントディレクトリを元に戻さない。

================
名称:		&set-opposite-window-to-current
機能:		反対側ウィンドウをカーソル側と同じパスに移動する。

書式:		&set-opposite-window-to-current
引数:		なし。
返値:		なし。

解説:		　反対側ウィンドウをカーソル側と同じパスに移動する。以下
		の命令列と同じである。
			{
				&cursor-opposite-window;
				&chdir-to-opposite-window;
				&cursor-opposite-window;
			}

================
名称:		&set-opt
別名:		&set-option
機能:		コマンドスイッチを再設定する。

書式:		&set-opt {-+}[option] …
引数:		{-+}[option]
			設定するオプション。
返値:		なし。

解説:		madoka の先頭で指定したコマンドスイッチを再設定する。通
		常のように '-' からスイッチを記述した場合、それまでに設
		定されていたオプションは全てクリアされる。'+' からスイッ
		チを記述した場合、クリアされず、更に追加する形でスイッチ
		が解釈される。

================
名称:		&setenv
機能:		環境変数を設定する。

書式:		&setenv name str …
引数:		name	環境変数名。
		str	変数に設定する値。
返値:		成功時 1、失敗時 0。

解説:		　name で指定した名前の環境変数に str で指定した文字列を
		設定し、成功した場合は 1 を、失敗した場合は 0 を返す。

		　str は複数個指定することができ、その場合は各々の引数は
		空白(' ')で連結されて一つの文字列として解釈される。

		　なお、環境変数名と文字列を合わせた長さが 255 バイト以
		上になった場合は OS の仕様によりエラーになる。

用例:		&setenv sakura 紗孔羅;
		&setenv GZIP '-9v --name';
		&setenv GZIP -9v   --name	# 上と同じ

================
名称:		&shrink-window
機能:		ウィンドウを一行分狭くする。

書式:		&shrink-window
引数:		なし。
返値:		成功時 1、失敗時 0。

解説:		　ファイルの一覧を表示するウィンドウの大きさを一行分狭く
		する。システム変数 %dirh の値も自動的に更新される。

================
名称:		&sort
別名:		&sort-menu
機能:		ディレクトリをソートして表示する。

書式:		&sort [-n/N/f/F/t/T/e/E/l/L/r/R]
引数:		-n	ソートをしないモードに切り換える。
		-N	ソートはせずに逆順に並べ換える。
		-f	ファイル名ソート。
		-F	ファイル名逆順ソート。
		-t	タイムスタンプ(ファイルの最終更新時刻)ソート。
		-T	タイムスタンプ逆順ソート。
		-e	拡張子ソート。
		-E	拡張子逆順ソート。
		-l	ファイル長ソート。
		-L	ファイル長逆順ソート。
		-r/-R	ソートモードはそのままに、逆順に並べ換える(既に
			-r/-R が指定されていた場合は元に戻る)。
返値:		なし。

解説:		　カーソルがある側のウィンドウのソートモードを変更する。
		オプションでモードを指定した場合は直接切り換わり、モード
		を省略した場合はメニューから選択して切り換えるようになっ
		ている。

		　なお、メニューの文字列は @sort セクションを定義するこ
		とにより書き換えることが出来る。

================
名称:		&source
機能:		定義ファイルを読み込み直す。

書式:		&source [-f]
引数:		-f	強制的に読み込み直す。
返値:		成功時 1、失敗時 0。

解説:		　環境変数 MINTRC3 や MINTRC などで指定した定義ファイル
		を読み込み、mint の設定を更新する。通常は定義ファイルの
		タイムスタンプが前回読み込んだ時より新しい場合のみ読み込
		みを行うが、-f オプションを指定するとタイムスタンプに関
		わらず常に読み込みを行う。

		　mintarc 中でも使えるが、期待通り動作しない部分もあるの
		で出来れば mintarc を終了してから実行した方が良い。

================
名称:		&sram-contrast
機能:		一時的にコントラスト値を変更する。

書式:		&sram-contrast [n]
引数:		n	コントラスト値(0 <= n <= 15)。
返値:		なし。

解説:		　コントラストを n で指定した値に変更し、全てのチェイン
		が終了したら自動的にコントラストを元に戻す。n を省略した
		場合は 15 が指定されたものと見なす。

		　コントラストの変更は、I/O を制御するだけでなく SRAM の
		メモリスイッチの値も書き換えるので、チェイン中に画面を初
		期化する外部コマンドなどを実行しても効果が継続する。チェ
		イン中にリセットなどを行うと書き換えた SRAM が元に戻らな
		いので注意すること。

================
名称:		&stop-condrv
機能:		condrv(em).sys のバッファリングを一時停止する。

書式:		&stop-condrv
引数:		なし。
返値:		なし。

解説:		　condrv(em).sys のバッファリングを一時停止し、全てのチ
		ェインが終了したら自動的に再開する。

================
名称:		&stop-music
機能:		音楽の演奏を停止する。

書式:		&stop-music
引数:		なし。
返値:		音源ドライバ未常駐時は 0、それ以外は 1。

解説:		　音楽の演奏を停止する。

================
名称:		&stop-vdisp
機能:		MFP Timer-A 割り込みを一時停止する。

書式:		&stop-vdisp
引数:		なし。
返値:		なし。

解説:		　MFP の Timer-A 割り込みを一時停止し、全てのチェインが
		終了したら自動的に再開する。

		　Timer-A は IOCS _VDISPST で設定される割り込みのことで、
		一般的には垂直表示(V-DISP)割り込みと呼ばれている。

================
名称:		&sync
機能:		ディスクバッファの内容を初期化する。

書式:		&sync
引数:		なし。
返値:		なし。

解説:		　OS のディスクバッファの内容を破棄し、初期化する。

================
名称:		&tar-selector
機能:		TAR アーカイブセレクタ起動

書式:		&tar-selector filename
引数:		filename
			ファイル名。
返値:		成功時 1、失敗時 0。

解説:		　TAR 形式書庫のアーカイブセレクタを起動する。TAR 形式書
		庫は gzip や bzip2 で圧縮されていることが多いが、そのよ
		うな場合は予め展開しておく必要がある。

================
名称:		&title-load
機能:		タイトル画像ファイルを表示する。

書式:		&title-load [-n] [-4/8/16] [-b] [-c] [-l[x][,y]]
			filename
引数:		filename
			タイトル画像ファイル名。
		-n	表示後にキー待ちをしない。画面表示とパレットをそ
			のままにしたまま別の処理を行える。&pop-text を実
			行すれば画像は消去され、パレットも元に戻るので、
			忘れずに実行すること。
		-4	テキストプレーン 0～1 だけを使用して 4 色で表示
			する。通常は .MAG ファイルのパレットデータを見て
			4/8/16 色表示が自動的に切り替わるが、判定が期待
			通りにいかない場合はこのオプションを指定すればよ
			い。.MIT ファイルは HK03 形式なら 4 色、HK04 形
			式なら 16 色で表示され、表示色数を変更することは
			出来ない(-4/-8/-16 オプションは無視される)。
		-8	テキストプレーン 0～2 だけを使用して 8 色で表示
			する。
		-16	テキストプレーン 0～3 の全てを使用して 16 色で表
			示する。
		-b	透明な黒(カラーコード $0000)を不透明な黒(同
			$0001)に変換して表示する。その結果、背景のグラフ
			ィック画面が一時的に隠れて見えなくなる。
		-c	画像を 768x512 の画面の中央に表示する。
		-l	画像を表示する左上座標を指定する。x、y それぞれ
			0～1023 の範囲で、省略してもよい。x 座標は 8 の
			倍数に切り捨てられる。テキスト画面の範囲内に収ま
			らない時は、収まるように左上方向にずらして表示す
			る。
返値:		成功時 1、失敗時 0。

解説:		　filename で指定したタイトル画像ファイルを、テキスト画
		面に表示する。正常に表示できた場合は 1、エラーが発生した
		場合は 0 を返す。

		　タイトル画像ファイルには、16 色以下でサイズが
		1024x1024 以下の .MAG(MAKI02 形式の画像データ)ファイル、
		若しくはサイズが 1016x508 以下の .MIT(HK03/HK04 形式の画
		像データ)ファイルが使用できる。なお、.MAG データの 200
		ラインフラグは無視される。

================
名称:		&toggle-drive-information
機能:		カレントドライブのドライブ情報表示モードを切り換える。

書式:		&toggle-drive-information
引数:		なし。
返値:		なし。

解説:		　システム変数 %infA ～ %infZ のうち、カレントドライブの
		ものを 0 -> 1 -> 0 と切り換える。

================
名称:		&toggle-file-information-mode
機能:		ファイル容量表示モードを切り換える。

書式:		&toggle-file-information-mode
引数:		なし。
返値:		なし。

解説:		　システム変数 %f_1k を 0 -> 1 -> 0 と切り換える。

================
名称:		&toggle-interrupt-window
機能:		割り込み仕様状況表示モードを切り換える。

書式:		&toggle-interrupt-window
引数:		なし。
返値:		なし。

解説:		　システム変数 %6809 を 0 -> 1 -> 0 と切り換える。

================
名称:		&toggle-palet-illumination
機能:		パレットイルミネーションの動作を切り換える。

書式:		&toggle-palet-illumination
引数:		なし。
返値:		なし。

解説:		　システム変数 %kpal を 0 -> 1 -> 0 と切り換える。

================
名称:		&toggle-power-window
機能:		MPU POWER 表示モードを切り換える。

書式:		&toggle-power-window
引数:		なし。
返値:		なし。

解説:		　システム変数 %6502 を 0 -> 1 -> 0 と切り換える。ただし、
		%6502 の初期値が 2 であった場合は 2 -> 0 -> 2 となる。

================
名称:		&toggle-screen-saver
機能:		スクリーンセーバ起動モードを切り換える。

書式:		&toggle-screen-saver
引数:		なし。
返値:		変更後のシステム変数 %down の値。

解説:		　システム変数 %down の値を保存し、0 を設定する。もう一
		度実行すると %down を保存しておいた値に戻す。これにより、
		スクリーンセーバを自動的に起動するかどうかが切り換えるこ
		とが出来る。

================
名称:		&toggle-window-size
機能:		ウィンドウサイズを切り換える。

書式:		&toggle-window-size
引数:		なし。
返値:		常に 1。

解説:		　ファイルの一覧を表示するウィンドウの大きさを保存し、最
		小のサイズにする。もう一度実行すると保存しておいた大きさ
		に戻す。これにより、ウィンドウの大きさを二種類に切り換え
		ることが出来る。システム変数 %dirh の値も自動的に更新さ
		れる。

================
名称:		&touch
機能:		ファイルのタイムスタンプを変更する。

書式:		&touch [-fn] [-rR file | [[CC]YY]MMDDhhmm[.ss] | -- ]
			filename …
引数:		-f	書き込み禁止ファイルでも強制的に変更する。
		-n	画面表示及びリロードを行わない。
		-r	指定したファイルの日付に変更する。ファイルがリン
			クであった場合、リンク先のファイルの日付を参照す
			る。
		-R	指定したファイルの日付に変更する。ファイルがリン
			クであった場合、リンクそのものの日付を参照する。
		--	以後の引数をファイルと見なし、オプション解析を打
			ち切る。
		filename
			ファイル名。
返値:		全て正常終了した場合はそのファイル数、一度でもエラーが発
		生した場合は 0。

解説:		　ファイルの日付を変更する。日付を省略した場合は &touch
		実行時の日付が設定される。存在しないファイルを指定した場
		合、新規作成して処理を続ける。全て正常終了した場合はその
		ファイル数、一度でもエラーが発生した場合は 0 を返す。

		　-r、-R 若しくは数値による日付が指定された場合、以後の
		引数はファイルと見なされ、続けてオプションを記述すること
		はできない。

		　[[CC]YY]MMDDhhmm[.ss] は 0～9 の数字を 8 ないし 12 桁
		続けることで日付を任意に指定できる。MM は月(01～12)、DD
		は日(01～31)、hh は時(00～23)、mm は分(00～59)。西暦の指
		定は四桁なら CCYY (1980～2079)、下二桁 YY (80～99、00～
		79)で指定する。下二桁で指定した場合 80～99 は 1980～1999、
		00～79 は 2000～2079 とそれぞれ補完される。西暦を省略し
		た場合は現在の年が設定される。末尾にピリオド＋2 桁の数字
		で秒数 ss(00～59)を指定することができ、省略時は 0 秒とな
		る。

仕様:		　秒数は OS の仕様により、奇数を指定した場合は 1 小さい値
		の偶数設定される。

		　実際には存在しない日付(2月31日等)であってもエラーとは
		ならない。

================
名称:		&trap
機能:		trap 命令を実行する。

書式:		&trap no,d0,d1,…,d6,d7 str
引数:		no	trap 番号。
		d?	データレジスタに設定する値。
		str	アドレスレジスタ a1 に設定する文字列。
返値:		実行直後のデータレジスタ d0.w の値。

解説:		　指定した値をレジスタにセットして、trap 命令を実行する。
		命令実行直後のレジスタ d0.w の値を返す。

		　引数の内容は以下の通り。

		no	trap #n の番号(n)を 0～15 の範囲で指定する。省略
			不可。
		d0	d0.l に与える値を指定する。省略可。
		d1	d1.l 〃
		…	…
		d6	d6.l 〃
		d7	d7.l 〃
		str	a1.l に与える任意の文字列を指定する。省略可。

		　d0～d7 を省略した場合、0 が指定されたものと見なされる。
		また、a2.l には mint 内のバッファ(最低 1024 バイトはある)
		のアドレスがセットされる。

用例:		&trap 2,0xffff;			# PCM8 常駐解除
		&iocs 14,0,0;			# GVRAM を未使用に設定
		&iocs 0x2f,5,38,12,19 " POWER TO THE DREAM "
						# 文字列描画

================
名称:		&turn-gvram-left-and-right
機能:		グラフィック画面を左右反転させる。

書式:		&turn-gvram-left-and-right
引数:		なし。
返値:		成功時 1、失敗時 0。

解説:		　グラフィック画面に表示している内容を、左右逆に反転させ
		る。

================
名称:		&turn-gvram-upside-down
機能:		グラフィック画面を上下反転させる。

書式:		&turn-gvram-upside-down
引数:		なし。
返値:		成功時 1、失敗時 0。

解説:		　グラフィック画面に表示している内容を、上下逆に反転させ
		る。

================
名称:		&twentyone-ignore-case
機能:		(V)TwentyOne.sys の設定を一時的に -C に変更する。

書式:		&twentyone-ignore-case
引数:		なし。
返値:		なし。

解説:		　(V)TwentyOne.sys の設定を一時的に -C に変更し、全ての
		チェインが終了したら自動的に元に戻す。

================
名称:		&un-mount
機能:		全ての仮想ディレクトリを解除する。

書式:		&un-mount
引数:		なし。
返値:		なし。

解説:		　全ての仮想ディレクトリを解除し、実ドライブとして扱える
		ようにする。実行後に自動的に &drive-check が呼び出される。

		　仮想ディレクトリに対応していないソフトウェアを実行する
		場合などに使用する。

		　解除した仮想ディレクトリを元に戻すには &re-mount を使
		用すればよい。

================
名称:		&uncompress
機能:		パターンに一致したファイルを展開する。

書式:		&uncompress [-i | -c] [-o<path>] pattern …
引数:		-i	大文字小文字を同一視する。
		-c	大文字小文字を区別する。
		-o<path>
			指定したパスにファイルを展開する。
		pattern	ファイル名のパターン。
返値:		成功時 1、失敗時 0。

解説:		　mintarc 内において、指定したパターンに一致するファイル
		を $MINTTMP に展開する。展開したファイルは $F、$M で展開
		した時と同じように自動削除の対象となるが、-o オプション
		指定した場合は一切関与しない。正常終了した場合は 1、それ
		以外の場合は 0 を返す。

		　-i、-c オプションを省略した場合、(V)TwentyOne.sys の設
		定を調べ、-C なら -i オプション、+C なら -c オプションが
		指定されたものと見なす。

================
名称:		&unless
機能:		式の値が偽の時、直後のブロックを実行する。

書式:		&unless [exp] { BLOCK }
引数:		exp	式。
返値:		なし。

解説:		　式の値が偽の場合、&unless の直後のブロックを実行する。
		逆に、式の値が真の場合は、&unless の直後のブロックは実行
		せず、無視する。

		　&unless [exp] { BLOCK } は、&if ! [exp] { BLOCK } と同
		じ動作となる。

		　式の書式に関しては &if の項を参照すること。

================
名称:		&unset
機能:		ユーザ変数を削除する。

書式:		&unset [pattern] …
引数:		pattern	パターン。
返値:		削除したユーザ変数の数。

解説:		　pattern で指定したパターンに一致するユーザ変数を削除し、
		削除したユーザ変数の数を返す。

用例:		&unset _ tmp*

================
名称:		&unsetenv
機能:		環境変数を削除する。

書式:		&unsetenv name …
引数:		name	環境変数名。
返値:		削除に成功した個数。

解説:		　name で指定した名前の環境変数を削除する。name は複数個
		指定することが出来るが、パターンマッチは使えない。削除に
		成功した環境変数の個数を返すが、DOS コールのエラーコード
		しか見ていないので、もともと存在しない環境変数を指定した
		場合なども成功と見なされる。

用例:		&unsetenv sakura;
		&unsetenv GZIP ZIPOPT

================
名称:		&v-bell
別名:		&visual-bell
機能:		ビジュアルベルを表示する。

書式:		&v-bell
引数:		なし。
返値:		なし。

解説:		　ビジュアルベルを表示する。

================
名称:		&wait
別名:		&sleep
機能:		指定時間だけ待機する。

書式:		&wait n
引数:		n	待機時間(1/100 秒単位)。
返値:		なし。

解説:		　n で指定した時間だけ、何もせずに待機する。

================
名称:		&which
機能:		コマンドの所在を検索する。

書式:		&which command
引数:		-c	カレントディレクトリは検索しない。
		-n	画面表示を行わない。
返値:		成功時 1、失敗時 0。

解説:		　command で指定したコマンドを検索し、その所在を表示する。
		見つかった場合はそのパスをユーザ変数 & に設定し、それ以
		外の場合はユーザ変数 & を削除する。

		　-c オプションを指定した場合、実行ファイルをカレントデ
		ィレクトリからは検索しない(環境変数 path に設定されたデ
		ィレクトリのみ検索する)。また、-n オプションを指定した場
		合、画面表示を行わない。

		　コマンドには mint の内部命令と、パスの通った実行ファイ
		ルが指定できる。内部命令が検索された場合、ユーザ変数 &
		に格納されるのは指定したコマンド名そのものとなる。

		　なお、$& は $MATCH としても参照可能である。

仕様:		　execd 組み込み時は、実行ファイルをカレントディレクトリ
		から検索するかどうかは execd 常駐時に -c オプションを指
		定したかどうかによって決まり、&which に対する -c オプシ
		ョンの有無は無視される。

================
名称:		&window-size
機能:		ウィンドウサイズを変更する。

書式:		&window-size num
引数:		num	ウィンドウサイズ(3 <= num <= 23)。
返値:		成功時 1、失敗時 0。

解説:		　ファイルの一覧を表示するウィンドウの大きさを n で指定
		したサイズに変更する。システム変数 %dirh の値も自動的に
		更新される。

================
名称:		&zip-selector
機能:		ZIP アーカイブセレクタ起動

書式:		&zip-selector filename
引数:		filename
			ファイル名。
返値:		成功時 1、失敗時 0。

解説:		　ZIP 形式書庫のアーカイブセレクタを起動する。

================
名称:		
別名:		
機能:		

書式:		
引数:		
返値:		

解説:		

用例:		


[EOF]
