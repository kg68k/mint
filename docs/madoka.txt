		[ mint madoka 仕様書 ]


　このファイルでは、mint 内蔵のインタプリタ言語である madoka の、mint v3
以降での仕様を解説しています。


------------------------------------------------------------------------

・コマンドスイッチ

キー条件
	-c	CTRL キーを押している時に有効。
	-t	SHIFT キーを押している時に有効。
	-x<n>	XF<n> キーを押している時に有効(<n> = 1～5)。
	-o<n>	OPT.<n> キーを押している時に有効(<n> = 1～2)。

	-&<n>	&prefix <n> でフラグが立っている時有効(<n> = 1～8)。
		二ストローク以上のキーバインドで使用します。

	-j	&exec-j-special-entry 実行時のみ有効。
		拡張子判別コピー等に仕様します。

	-m	カーソル側ウィンドウにマークがある時に有効。
	-!	誤ったキー操作の時に有効。

キー入力待ち
	-h	ファイル実行後キー入力を待つ(表示あり)。
	-k	ファイル実行後キー入力を待つ(表示なし)。

画面制御
	-f	ファイル実行時にファンクションキーを消去。
	-i	ファイル実行時にカーソルを消去。
	-l	ファイル実行後にコンソールを消去。
	-s	ファイル実行を全画面で行う。
	-p	コマンドライン文字列を画面に表示しない。
	-q	ファイル実行時に透明プライオリティを復帰。
	-@	ファイル実行時にテキストパレットをシステム値に戻す。

その他
	-a	$< があってもコマンドヒストリに登録しない。
	-d	ファイル実行後ディレクトリを再読み込み。
	-n	madoka を実行しない。
	-v	シェル展開記号があってもシェルを起動しない。

グラフィック
	-g0	ファイル実行後に &gvram-off 呼び出し。
	-g3	ファイル実行後に &half 呼び出し(画面モード自動取得)。
	-g1	〃			       ( 16 色)
	-g2	〃			       (256 色)
	-g6	〃			       (64K 色)
	-g5	ファイル実行後に &gvon 呼び出し(画面モード自動取得)。
	-g7	〃			       ( 16 色)
	-g4	〃			       (256 色)
	-g8	〃			       (64K 色)
	-g9	〃			       ( 16 色、24kHz)


------------------------------------------------------------------------

・数値表現

<hex> := 0x[0-9A-Fa-f]+ | $[0-9A-Fa-f]+
<bin> := 0b[0-1]+
<dec> := [0-9]+
<rgb> := RGB(<num>,<num>,<num>) | RGB(<num>,<num>,<num>,<num>)

<num> := <hex> | <bin> | <dec> | <rgb>

　扱える数値は 0～65535 の符合なし整数。


------------------------------------------------------------------------

・コメント

　行頭の '#' 以降はコメントとなる。また、任意の場所にある一個以上のブラ
ンク文字(空白もしくは水平タブ)の直後の '#' 以降もコメントとなる(ただしク
ォーティング中は除く)。


------------------------------------------------------------------------

・マクロ(従来型)

使用可能文字
	マクロ名先頭	ABCDEFGHIJKLMNOPQRSTUVWXYZ
			abcdefghijklmnopqrstuvwxyz
			_ - +
			二バイト文字(Shift-JIS)
	二文字目以降	上記に加え 0123456789

マクロ定義
	$macroname	madoka ..。

	　行頭から '$'＋マクロ名でマクロ定義を開始する。マクロ名の直後に
	一個以上のブランク文字(空白もしくは水平タブ)を追いてから madoka
	を記述する。チェインや行連結により複数行記述が可能だが、コマンド
	スイッチは記述できない。

マクロ呼び出し
	　(macroname) でマクロを展開する。マクロ名の指定には変数やマクロ
	は使用できない。

	　マクロ定義内で他のマクロを展開する再帰呼び出しも可能である。


------------------------------------------------------------------------

・引数付きマクロ

使用可能文字
	　従来型マクロと同じ。

引数付きマクロ定義
	　従来型マクロと同じ。

	　引数付きマクロ内では、第 <n> 番目の引数を $<n> で展開できる
	(<n> = 1～)。

	　また、$0 で自分自身のマクロ名を展開する(意味はない)。

呼び出し方法
	　$(macroname [arg1 [arg2]] ...) で引数付きマクロを展開する。マ
	クロ名の直後に一個以上のブランク文字で区切って任意の数のマクロ引
	数を指定できる。指定したマクロ引数は、マクロ定義で記述された
	madoka 中では、$1 $2 ..。で展開できる。$0 は macroname を展開す
	る。

	　マクロ引数には、変数・マクロ・引数付きマクロなどを渡すこと出来
	る。

	　マクロ引数はマクロを呼び出した時ではなく、展開したマクロ内で実
	際にその引数を使用する瞬間に展開される。マクロ引数 $1 $2 ..。に
	渡された文字列のなかに変数が含まれる場合、その変数を展開・修飾し
	た結果が展開され、その文字列に対して $1 $2 ..。に対する修飾が行
	われる。

	　マクロ定義内で他のマクロを展開する再帰呼び出しも可能である。


------------------------------------------------------------------------

・エスケープ

　%unix 2 の時、madoka 中に記述した '\' はエスケープ機能として働き、その
直後の文字をそのまま通す。'\' が必要な場合は '\\' と記述する。


------------------------------------------------------------------------

・クオーティング

　"'" の対で囲まれた範囲は、空白・特殊記号・変数・マクロなどが評価されず、
そのままの文字列として通される。'"' もクォーティング記号としてではなく、
通常の文字として扱われる。

　'"' の対で囲まれた範囲は、空白が評価されず、単一の文字列として通される。
"'" はクォーティング記号として扱われる。


------------------------------------------------------------------------

・チェイン

　コマンドの末尾に ';' を付ければ、コマンド実行後に、その右側に記述した
コマンドを続けて実行する。右側にコマンドの記述がなければ次の行を参照する。

　チェイン実行中に BREAK キーを押すと madoka の実行を強制的に停止する。


------------------------------------------------------------------------

・ブロック

　'{' と '}' で囲まれた範囲を「ブロック」と見なす。制御構文のために使用
するものであるが、それ以外の場所に記述しても問題ない。'{' と '}' 自体は
チェイン記号と同等と見なされ、';' の場合と同様にコマンドを続けて記述する
ことが出来る。

　なお、mintfunc.man 中では説明のため「{ BLOCK }」と記述しているが、正確
には '{' と '}' もブロックに含まれる。

　コマンドの末尾に '{' を付ければ、ブロックの開始となる。また、コマンドの
末尾ではなく次の行に '{' を付けてもよい。

　コマンドの末尾に '}' を付ければ、ブロックの終了となる。また、コマンドの
末尾ではなく次の行に '}' を付けてもよい。


------------------------------------------------------------------------

・ホームディレクトリ展開

　madoka 中に記述した '~/' は、環境変数 HOME の値に置換される。末尾には
'/' が付く(環境変数 HOME が '/' で終わっている場合は付かない)。


------------------------------------------------------------------------

・変数展開

使用可能文字
	変数名先頭	ABCDEFGHIJKLMNOPQRSTUVWXYZ
			abcdefghijklmnopqrstuvwxyz
			# & - < _
			二バイト文字(Shift-JIS)
	二文字目以降	上記に加え 0123456789

	　ただし、引数付きマクロ定義内でマクロ引数を展開する場合は先頭に
	0123456789 を使用することが出来る。

展開方法
	　$name で変数を展開する。

	　mint は複数の種類の変数を扱うことができ、name で指定された名称
	の変数を以下の順序で検索する。変数が存在した場合はその値を展開す
	る。変数が存在しなかった場合は $name という文字列をそのまま返す。

	1. マクロ引数
	2. システム予約変数
	3. ユーザ変数
	4. システム変数
	5. 環境変数

	　'$' の直後に '?' を記述して $?name とすると、変数 name が存在
	するか調べ、存在した場合は '1'、存在しない場合は '0' を返す。

	　'$' の直後に '@' を記述して $@name とすると、システム変数だけ
	を検索する。また、'%' を記述して $%name とすると、環境変数だけを
	検索する。

	　'@' と '%' は併用できない。'?' と、'@' 若しくは '%' とを併用す
	る場合は '?' を先に記述する。

	　変数名を '{' と '}' の対で囲って ${name} とすると、変数が存在
	しなかった場合に NUL という文字列に展開するようになる。また、こ
	の記述は変数名を分離することにも使える。

変数修飾子
	　変数展開の直後に変数修飾子を付けると、変数の展開結果を加工する
	ことが出来る。$name:x 若しくは ${name:x} と記述する。

	　変数の値が複数の単語を含む場合、変数修飾子はそれぞれの単語に対
	して働く。

	:u	(upper)		最初に見つけた a-z を A-Z に大文字化。
	:U	(all upper)	全ての a-z を A-Z に大文字化。
	:au	(all upper)	〃
	:l	(lower)		最初に見つけた A-Z を a-z に小文字化。
	:L	(all lower)	全ての A-Z を a-z に小文字化。
	:al	(all lower)	〃

	:e	(extention)	拡張子部分を取り出す。
	:r	(root)		拡張子部分を削除する。
	:d	(drive)		パス名からドライブ名を取り出す(':' は付
				かない)。
	:h	(head)		パス名からドライブ名とディレクトリ名を取
				り出す(ディレクトリ名の末尾のパスデリミ
				タは残らない)。
	:t	(tail)		パス名からファイル名を取り出す。

	:s/str1/str2[/g]	str1 が含まれていたら、それを str2 に置
		(substitution)	き換える。str1 が複数含まれている場合は
				最初のものを置換するが、'/g' をつけると
				二番目以降のものも全て置換する。区切り記
				号は任意に変更可で、':s' の直後に記述し
				た文字が採用される。


------------------------------------------------------------------------

・シェル起動

　通常、外部コマンド(ファイル)は mint が直接実行するが、条件を満たした場
合は $MINTSHELL を介して実行する。

・コマンドスイッチ -v が指定されていないこと。
・以下のいずれか
  ・ファイル名または引数にシェル展開記号が含まれている。
  ・%unix 0 のとき、コマンド名がシェル起動コマンドである。
  ・%unix 0 のとき、ファイル名末尾が .BAT (大文字小文字区別なし)である。

　シェル展開記号は以下の通り。

	%unix 0 の場合		&schr0 で指定した文字。
				標準では <>|
	%unix 1～2 の場合	&schr1 で指定した文字。
				標準では $&(*;<>?[`{|~

　シェル起動コマンドは以下の通り。

	%unix 0 の場合		&scmd0 で指定したコマンド。
				標準では
				break cd chdir cls copy date del dir md
				memfree mkdir ren rename rd rmdir screen
				time type ver verify vol
	%unix 1～2 の場合	なし(指定不可)。

　なお、$F や $C などのパス名を示す変数を展開した結果については、上記の
シェル展開記号やシェル起動コマンドのチェックは抑制される。また、他の部分
に要因があって $MINTSHELL を介す場合でも、シェルがパス名に含まれる記号を
展開しないように、自動的にクォーティングする。


[EOF]
